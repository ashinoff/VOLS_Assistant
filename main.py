import csv
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Path to zones file
ZONES_FILE = "zones_rk_ug.csv"

# Load user data from CSV
def load_user_data():
    users = {}
    try:
        with open(ZONES_FILE, newline="", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                users[row["Telegram ID"]] = {
                    "Visibility": row["Visibility"],
                    "Branch": row["–§–∏–ª–∏–∞–ª"],
                    "RES": row["–†–≠–°"],
                    "FIO": row["–§–ò–û"],
                    "Responsible": row["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
                }
    except FileNotFoundError:
        logger.error(f"Zones file {ZONES_FILE} not found.")
    return users

# Check user visibility for a specific menu item
def has_access(user_data, required_visibility):
    if not user_data:
        return False
    user_visibility = user_data.get("Visibility", "").lower()
    return (
        user_visibility == "all"
        or required_visibility.lower() == "all"
        or user_visibility == required_visibility.lower()
    )

# Define menu buttons with visibility requirements
MENU_BUTTONS = [
    {
        "text": "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å ‚ö°Ô∏è",
        "callback_data": "rosseti_kuban",
        "visibility": "all",
    },
    {
        "text": "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì üîå",
        "callback_data": "rosseti_yug",
        "visibility": "all",
    },
    {
        "text": "–í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç—ã üìä",
        "callback_data": "download_reports",
        "visibility": "all",
    },
    {
        "text": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû",
        "callback_data": "phone_directory",
        "visibility": "all",
    },
    {
        "text": "–°–ø—Ä–∞–≤–∫–∞ ‚ùì",
        "callback_data": "help",
        "visibility": "all",
    },
    {
        "text": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ",
        "callback_data": "user_guide",
        "visibility": "all",
    },
]

# Build keyboard based on user visibility
def build_menu(user_data):
    keyboard = []
    for button in MENU_BUTTONS:
        if has_access(user_data, button["visibility"]):
            keyboard.append(
                [InlineKeyboardButton(button["text"], callback_data=button["callback_data"])]
            )
    return InlineKeyboardMarkup(keyboard)

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    fio = user_data["FIO"]
    keyboard = build_menu(user_data)
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fio}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard
    )

# Button callback handler (placeholder for future functionality)
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # Placeholder responses for each button
    callback_data = query.data
    responses = {
        "rosseti_kuban": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å ‚ö°Ô∏è. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "rosseti_yug": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –†–æ—Å—Å–µ—Ç–∏ –Æ–ì ‚ö°Ô∏è. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "download_reports": "–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ üìä. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "phone_directory": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "help": "–°–ø—Ä–∞–≤–∫–∞ ‚ùì. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "user_guide": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
    }

    await query.message.reply_text(responses.get(callback_data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."))

# Error handler
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

def main():
    # Replace 'YOUR_TOKEN' with your bot token
    application = Application.builder().token("YOUR_TOKEN").build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    # Start the bot
    application.run_polling()

if __name__ == "__main__":
    main()
