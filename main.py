import os
import logging
import csv
import io
import re
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import pandas as pd
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 5000))
ZONES_CSV_URL = os.environ.get('ZONES_CSV_URL')

# –°–ø–∏—Å–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
ROSSETI_KUBAN_BRANCHES = [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°", "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°", "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°", "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°", "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°", "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°"
]

ROSSETI_YUG_BRANCHES = [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°", "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–µ –≠–°", "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifications_storage = {
    'RK': [],
    'UG': []
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_cache = {}

def get_env_key_for_branch(branch: str, network: str, is_reference: bool = False) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞"""
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
    translit_map = {
        '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ': 'YUGO_ZAPADNYE',
        '–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ': 'UST_LABINSKIE', 
        '–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ': 'TIMASHEVSKIE',
        '–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ': 'TIKHORETSKIE',
        '–°–æ—á–∏–Ω—Å–∫–∏–µ': 'SOCHINSKIE',
        '–°–ª–∞–≤—è–Ω—Å–∫–∏–µ': 'SLAVYANSKIE',
        '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ': 'LENINGRADSKIE',
        '–õ–∞–±–∏–Ω—Å–∫–∏–µ': 'LABINSKIE',
        '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ': 'KRASNODARSKIE',
        '–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ': 'ARMAVIRSKIE',
        '–ê–¥—ã–≥–µ–π—Å–∫–∏–µ': 'ADYGEYSKIE',
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ': 'TSENTRALNYE',
        '–ó–∞–ø–∞–¥–Ω—ã–µ': 'ZAPADNYE',
        '–í–æ—Å—Ç–æ—á–Ω—ã–µ': 'VOSTOCHNYE',
        '–Æ–∂–Ω—ã–µ': 'YUZHNYE',
        '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ': 'SEVERO_VOSTOCHNYE',
        '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ': 'YUGO_VOSTOCHNYE',
        '–°–µ–≤–µ—Ä–Ω—ã–µ': 'SEVERNYE'
    }
    
    # –£–±–∏—Ä–∞–µ–º "–≠–°" –∏ –∏—â–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
    branch_clean = branch.replace(' –≠–°', '').strip()
    branch_key = translit_map.get(branch_clean, branch_clean.upper().replace(' ', '_').replace('-', '_'))
    
    suffix = f"_{network}_SP" if is_reference else f"_{network}"
    env_key = f"{branch_key}_URL{suffix}"
    logger.info(f"–ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_key} –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: {branch}")
    return env_key

def load_csv_from_url(url: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ URL"""
    try:
        response = requests.get(url)
        response.raise_for_status()
        response.encoding = 'utf-8-sig'
        
        csv_file = io.StringIO(response.text)
        reader = csv.DictReader(csv_file)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        data = []
        for row in reader:
            normalized_row = {key.strip(): value.strip() if value else '' for key, value in row.items()}
            data.append(normalized_row)
        
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        return []

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV"""
    global users_cache
    try:
        data = load_csv_from_url(ZONES_CSV_URL)
        users_cache = {}
        for row in data:
            telegram_id = row.get('Telegram ID', '').strip()
            if telegram_id:
                users_cache[telegram_id] = {
                    'visibility': row.get('–í–∏–¥–∏–º–æ—Å—Ç—å', '').strip(),
                    'branch': row.get('–§–∏–ª–∏–∞–ª', '').strip(),
                    'res': row.get('–†–≠–°', '').strip(),
                    'name': row.get('–§–ò–û', '').strip(),
                    'responsible': row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '').strip(),
                    'email': row.get('Email', '').strip()  # –î–æ–±–∞–≤–ª—è–µ–º email
                }
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def get_user_permissions(user_id: str) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not users_cache:
        load_users_data()
    
    return users_cache.get(str(user_id), {
        'visibility': None,
        'branch': None,
        'res': None,
        'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        'responsible': None
    })

def normalize_tp_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    return ''.join(filter(str.isdigit, name))

def search_tp_in_data(tp_query: str, data: List[Dict], column: str) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –¢–ü –≤ –¥–∞–Ω–Ω—ã—Ö"""
    normalized_query = normalize_tp_name(tp_query)
    results = []
    
    for row in data:
        tp_name = row.get(column, '')
        normalized_tp = normalize_tp_name(tp_name)
        
        if normalized_query in normalized_tp:
            results.append(row)
    
    return results

def get_main_keyboard(permissions: Dict) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤"""
    keyboard = []
    
    visibility = permissions.get('visibility')
    branch = permissions.get('branch')
    res = permissions.get('res')
    
    # –†–û–°–°–ï–¢–ò –∫–Ω–æ–ø–∫–∏
    if visibility == 'All':
        keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –Æ–ì'])
    elif visibility == 'RK':
        if branch == 'All':
            keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        else:
            keyboard.append([f'‚ö° {branch}'])
    elif visibility == 'UG':
        if branch == 'All':
            keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –Æ–ì'])
        else:
            keyboard.append([f'‚ö° {branch}'])
    
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    keyboard.append(['üìû –¢–ï–õ–ï–§–û–ù–´ –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í'])
    
    # –û—Ç—á–µ—Ç—ã
    if res == 'All':
        if visibility == 'All':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
        elif visibility == 'RK':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
        elif visibility == 'UG':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
    
    # –°–ø—Ä–∞–≤–∫–∞
    keyboard.append(['‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê'])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_branch_keyboard(branches: List[str]) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏"""
    keyboard = []
    
    if len(branches) == 11:  # –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨
        # 5 —Å–ª–µ–≤–∞, 5 —Å–ø—Ä–∞–≤–∞, 1 –≤–Ω–∏–∑—É (–°–æ—á–∏–Ω—Å–∫–∏–µ)
        for i in range(0, 10, 2):
            keyboard.append([f'‚ö° {branches[i]}', f'‚ö° {branches[i+1]}'])
        keyboard.append([f'‚ö° {branches[10]}'])  # –°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°
    elif len(branches) == 8:  # –†–û–°–°–ï–¢–ò –Æ–ì  
        # 4 —Å–ª–µ–≤–∞, 4 —Å–ø—Ä–∞–≤–∞
        for i in range(0, 8, 2):
            keyboard.append([f'‚ö° {branches[i]}', f'‚ö° {branches[i+1]}'])
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ - –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É
        for branch in branches:
            keyboard.append([f'‚ö° {branch}'])
    
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_branch_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞"""
    keyboard = [
        ['üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü'],
        ['üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'],
        ['‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_reports_keyboard(permissions: Dict) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = []
    visibility = permissions.get('visibility')
    
    if visibility == 'All':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì'])
    elif visibility == 'RK':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
    elif visibility == 'UG':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì'])
    
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REFERENCE_DOCS = {
    '–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ –í–û–õ–° –Ω–∞ –í–õ 24-26 –≥–æ–¥—ã': os.environ.get('DOC_PLAN_VYRUCHKA_URL'),
    '–†–µ–≥–ª–∞–º–µ–Ω—Ç –í–û–õ–°': os.environ.get('DOC_REGLAMENT_VOLS_URL'),
    '–§–æ—Ä–º–∞ –∞–∫—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏': os.environ.get('DOC_AKT_INVENTARIZACII_URL'),
    '–§–æ—Ä–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–∏—Å—å–º–∞': os.environ.get('DOC_GARANTIJNOE_PISMO_URL'),
    '–§–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞': os.environ.get('DOC_PRETENZIONNOE_PISMO_URL'),
    '–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º': os.environ.get('DOC_OTCHET_KONTRAGENTY_URL'),
}

def get_reference_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ –∏–∑-–∑–∞ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    for doc_name, doc_url in REFERENCE_DOCS.items():
        if doc_url:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            button_text = doc_name
            if len(doc_name) > 30:
                # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                if '–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ' in doc_name:
                    button_text = 'üìä –ü–ª–∞–Ω –≤—ã—Ä—É—á–∫–∏ –í–û–õ–° 24-26'
                elif '–§–æ—Ä–º–∞ –∞–∫—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏' in doc_name:
                    button_text = 'üìÑ –ê–∫—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏'
                elif '–§–æ—Ä–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–∏—Å—å–º–∞' in doc_name:
                    button_text = 'üìÑ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –ø–∏—Å—å–º–æ'
                elif '–§–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞' in doc_name:
                    button_text = 'üìÑ –ü—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ'
                else:
                    button_text = f'üìÑ {doc_name[:27]}...'
            else:
                button_text = f'üìÑ {doc_name}'
            
            keyboard.append([button_text])
    
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    permissions = get_user_permissions(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({update.effective_user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    if not permissions['visibility']:
        await update.message.reply_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return
    
    user_states[user_id] = {'state': 'main'}
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {permissions['name']}!",
        reply_markup=get_main_keyboard(permissions)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    permissions = get_user_permissions(user_id)
    
    if not permissions['visibility']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    
    state = user_states.get(user_id, {}).get('state', 'main')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if state in ['rosseti_kuban', 'rosseti_yug', 'reports', 'reference', 'phones']:
            user_states[user_id] = {'state': 'main'}
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(permissions))
        elif state.startswith('branch_'):
            network = user_states[user_id].get('network')
            if network == 'RK':
                user_states[user_id] = {'state': 'rosseti_kuban', 'network': 'RK'}
                branches = ROSSETI_KUBAN_BRANCHES
            else:
                user_states[user_id] = {'state': 'rosseti_yug', 'network': 'UG'}
                branches = ROSSETI_YUG_BRANCHES
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª", reply_markup=get_branch_keyboard(branches))
        elif state in ['search_tp', 'send_notification']:
            branch = user_states[user_id].get('branch')
            user_states[user_id]['state'] = f'branch_{branch}'
            await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if state == 'main':
        if text == 'üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨':
            if permissions['visibility'] in ['All', 'RK']:
                if permissions['branch'] == 'All':
                    user_states[user_id] = {'state': 'rosseti_kuban', 'network': 'RK'}
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨",
                        reply_markup=get_branch_keyboard(ROSSETI_KUBAN_BRANCHES)
                    )
                else:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∏–ª–∏–∞–ª
                    user_states[user_id] = {'state': f'branch_{permissions["branch"]}', 'branch': permissions['branch'], 'network': 'RK'}
                    await update.message.reply_text(
                        f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {permissions['branch']}",
                        reply_markup=get_branch_menu_keyboard()
                    )
        
        elif text == 'üè¢ –†–û–°–°–ï–¢–ò –Æ–ì':
            if permissions['visibility'] in ['All', 'UG']:
                if permissions['branch'] == 'All':
                    user_states[user_id] = {'state': 'rosseti_yug', 'network': 'UG'}
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –†–û–°–°–ï–¢–ò –Æ–ì",
                        reply_markup=get_branch_keyboard(ROSSETI_YUG_BRANCHES)
                    )
                else:
                    user_states[user_id] = {'state': f'branch_{permissions["branch"]}', 'branch': permissions['branch'], 'network': 'UG'}
                    await update.message.reply_text(
                        f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {permissions['branch']}",
                        reply_markup=get_branch_menu_keyboard()
                    )
        
        elif text.startswith('‚ö° '):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–∏–ª–∏–∞–ª—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
            branch = text[2:]
            network = 'RK' if permissions['visibility'] == 'RK' else 'UG'
            user_states[user_id] = {'state': f'branch_{branch}', 'branch': branch, 'network': network}
            await update.message.reply_text(
                f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {branch}",
                reply_markup=get_branch_menu_keyboard()
            )
        
        elif text == 'üìä –û–¢–ß–ï–¢–´':
            user_states[user_id] = {'state': 'reports'}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞",
                reply_markup=get_reports_keyboard(permissions)
            )
        
        elif text == '‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê':
            user_states[user_id] = {'state': 'reference'}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
                reply_markup=get_reference_keyboard()
            )
        
        elif text == 'üìû –¢–ï–õ–ï–§–û–ù–´ –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í':
            await update.message.reply_text("üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    elif state in ['rosseti_kuban', 'rosseti_yug']:
        if text.startswith('‚ö° '):
            branch = text[2:]  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –º–æ–ª–Ω–∏–∏
            user_states[user_id]['state'] = f'branch_{branch}'
            user_states[user_id]['branch'] = branch
            await update.message.reply_text(
                f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {branch}",
                reply_markup=get_branch_menu_keyboard()
            )
    
    # –ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞
    elif state.startswith('branch_'):
        if text == 'üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü':
            user_states[user_id]['state'] = 'search_tp'
            user_states[user_id]['action'] = 'search'
            keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
            await update.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –ù-6477, 6-47, 6477, 477",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        
        elif text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ':
            user_states[user_id]['state'] = 'send_notification'
            user_states[user_id]['action'] = 'notification_tp'
            keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
            await update.message.reply_text(
                "üì® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –ù-6477, 6-47, 6477, 477",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        
        elif text == '‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞':
            user_states[user_id]['state'] = 'reference'
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
                reply_markup=get_reference_keyboard()
            )
    
    # –ü–æ–∏—Å–∫ –¢–ü
    elif state == 'search_tp' and user_states[user_id].get('action') == 'search':
        branch = user_states[user_id].get('branch')
        network = user_states[user_id].get('network')
        
        logger.info(f"–ü–æ–∏—Å–∫ –¢–ü –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: {branch}, —Å–µ—Ç—å: {network}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–∞
        env_key = get_env_key_for_branch(branch, network)
        csv_url = os.environ.get(env_key)
        
        logger.info(f"URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {env_key}: {csv_url}")
        
        if not csv_url:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            available_vars = [key for key in os.environ.keys() if 'URL' in key and network in key]
            logger.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è {network}: {available_vars}")
            await update.message.reply_text(
                f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                f"–ò—Å–∫–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: {env_key}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_vars[:5])}"
            )
            return
        
        data = load_csv_from_url(csv_url)
        results = search_tp_in_data(text, data, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü')
        
        if not results:
            await update.message.reply_text("‚ùå –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¢–ü
        tp_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] for r in results]))
        
        if len(tp_list) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¢–ü, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_tp_results(update, results, tp_list[0])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¢–ü
            keyboard = []
            for tp in tp_list[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                keyboard.append([tp])
            keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
            
            user_states[user_id]['search_results'] = results
            user_states[user_id]['action'] = 'select_tp'
            
            await update.message.reply_text(
                f"–ù–∞–π–¥–µ–Ω–æ {len(tp_list)} –¢–ü. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
    
    # –í—ã–±–æ—Ä –¢–ü –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    elif state == 'search_tp' and user_states[user_id].get('action') == 'select_tp':
        results = user_states[user_id].get('search_results', [])
        filtered_results = [r for r in results if r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == text]
        
        if filtered_results:
            await show_tp_results(update, filtered_results, text)
            user_states[user_id]['action'] = 'search'
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∏—Å–∫ –¢–ü
    elif state == 'send_notification' and user_states[user_id].get('action') == 'notification_tp':
        branch = user_states[user_id].get('branch')
        network = user_states[user_id].get('network')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        env_key = get_env_key_for_branch(branch, network, is_reference=True)
        csv_url = os.environ.get(env_key)
        
        if not csv_url:
            await update.message.reply_text(f"‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        data = load_csv_from_url(csv_url)
        results = search_tp_in_data(text, data, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü')
        
        if not results:
            await update.message.reply_text("‚ùå –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¢–ü
        tp_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] for r in results]))
        
        keyboard = []
        for tp in tp_list[:10]:
            keyboard.append([tp])
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        user_states[user_id]['notification_results'] = results
        user_states[user_id]['action'] = 'select_notification_tp'
        
        await update.message.reply_text(
            f"–ù–∞–π–¥–µ–Ω–æ {len(tp_list)} –¢–ü. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    # –í—ã–±–æ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    elif state == 'send_notification' and user_states[user_id].get('action') == 'select_notification_tp':
        results = user_states[user_id].get('notification_results', [])
        filtered_results = [r for r in results if r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == text]
        
        if filtered_results:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¢–ü
            user_states[user_id]['selected_tp'] = text
            user_states[user_id]['tp_data'] = filtered_results[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–õ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¢–ü
            vl_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ'] for r in filtered_results]))
            
            keyboard = []
            for vl in vl_list:
                keyboard.append([vl])
            keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
            
            user_states[user_id]['action'] = 'select_vl'
            
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è –¢–ü {text}:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
    
    # –í—ã–±–æ—Ä –í–õ
    elif state == 'send_notification' and user_states[user_id].get('action') == 'select_vl':
        user_states[user_id]['selected_vl'] = text
        user_states[user_id]['action'] = 'send_location'
        
        keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    # –û—Ç—á–µ—Ç—ã
    elif state == 'reports':
        if text == 'üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨':
            await generate_report(update, context, 'RK', permissions)
        elif text == 'üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì':
            await generate_report(update, context, 'UG', permissions)
    
    # –°–ø—Ä–∞–≤–∫–∞
    elif state == 'reference':
        if text.startswith('üìÑ ') or text.startswith('üìä '):
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
            button_text = text[2:].strip()
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫ –ø–æ–ª–Ω—ã–º
            doc_mapping = {
                '–ü–ª–∞–Ω –≤—ã—Ä—É—á–∫–∏ –í–û–õ–° 24-26': '–ü–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ –í–û–õ–° –Ω–∞ –í–õ 24-26 –≥–æ–¥—ã',
                '–ê–∫—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏': '–§–æ—Ä–º–∞ –∞–∫—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏',
                '–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –ø–∏—Å—å–º–æ': '–§–æ—Ä–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ –ø–∏—Å—å–º–∞',
                '–ü—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ': '–§–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞',
                '–†–µ–≥–ª–∞–º–µ–Ω—Ç –í–û–õ–°': '–†–µ–≥–ª–∞–º–µ–Ω—Ç –í–û–õ–°',
                '–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º': '–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º'
            }
            
            # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            doc_name = doc_mapping.get(button_text, button_text)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –∏—â–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if doc_name not in REFERENCE_DOCS:
                # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                for full_name in REFERENCE_DOCS.keys():
                    if button_text in full_name or full_name in button_text:
                        doc_name = full_name
                        break
            
            doc_url = REFERENCE_DOCS.get(doc_name)
            
            if doc_url:
                try:
                    # –î–ª—è Google Docs/Sheets - –¥–∞–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
                    if 'docs.google.com/document' in doc_url:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        doc_id = doc_url.split('/d/')[1].split('/')[0] if '/d/' in doc_url else None
                        if doc_id:
                            # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF
                            pdf_url = f"https://docs.google.com/document/d/{doc_id}/export?format=pdf"
                            await update.message.reply_text(
                                f"üìÑ {doc_name}\n\n"
                                f"–°–∫–∞—á–∞—Ç—å PDF: {pdf_url}\n\n"
                                f"–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {doc_url}"
                            )
                        else:
                            await update.message.reply_text(
                                f"üìÑ {doc_name}\n\n"
                                f"–°—Å—ã–ª–∫–∞: {doc_url}"
                            )
                    
                    elif 'docs.google.com/spreadsheets' in doc_url:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
                        doc_id = doc_url.split('/d/')[1].split('/')[0] if '/d/' in doc_url else None
                        if doc_id:
                            # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel
                            xlsx_url = f"https://docs.google.com/spreadsheets/d/{doc_id}/export?format=xlsx"
                            await update.message.reply_text(
                                f"üìä {doc_name}\n\n"
                                f"–°–∫–∞—á–∞—Ç—å Excel: {xlsx_url}\n\n"
                                f"–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {doc_url}"
                            )
                        else:
                            await update.message.reply_text(
                                f"üìä {doc_name}\n\n"
                                f"–°—Å—ã–ª–∫–∞: {doc_url}"
                            )
                    
                    elif 'drive.google.com' in doc_url:
                        # –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive
                        if '/file/d/' in doc_url:
                            file_id = doc_url.split('/file/d/')[1].split('/')[0]
                            direct_url = f"https://drive.google.com/uc?export=download&id={file_id}"
                            await update.message.reply_text(
                                f"üìÑ {doc_name}\n\n"
                                f"–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {direct_url}\n\n"
                                f"–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {doc_url}"
                            )
                        else:
                            await update.message.reply_text(
                                f"üìÑ {doc_name}\n\n"
                                f"–°—Å—ã–ª–∫–∞: {doc_url}"
                            )
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Å—ã–ª–æ–∫
                        await update.message.reply_text(
                            f"üìÑ {doc_name}\n\n"
                            f"–°—Å—ã–ª–∫–∞: {doc_url}"
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_name}: {e}")
                    await update.message.reply_text(
                        f"üìÑ {doc_name}\n\n"
                        f"–°—Å—ã–ª–∫–∞: {doc_url}"
                    )
            else:
                await update.message.reply_text(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def show_tp_results(update: Update, results: List[Dict], tp_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¢–ü"""
    if not results:
        await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –†–≠–° –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    res_name = results[0].get('–†–≠–°', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    message = f"üìç {res_name} –†–≠–°, –Ω–∞ {tp_name} –Ω–∞–π–¥–µ–Ω–æ {len(results)} –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n\n"
    
    for result in results:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        vl = result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ', '-')
        supports = result.get('–û–ø–æ—Ä—ã', '-')
        supports_count = result.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä', '-')
        provider = result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞', '-')
        
        message += f"‚ö° –í–õ: {vl}\n"
        message += f"–û–ø–æ—Ä—ã: {supports}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä: {supports_count}\n"
        message += f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {provider}\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        parts = []
        current_part = f"üìç {res_name} –†–≠–°, –Ω–∞ {tp_name} –Ω–∞–π–¥–µ–Ω–æ {len(results)} –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n\n"
        
        for result in results:
            result_text = f"‚ö° –í–õ: {result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ', '-')}\n"
            result_text += f"–û–ø–æ—Ä—ã: {result.get('–û–ø–æ—Ä—ã', '-')}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä: {result.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä', '-')}\n"
            result_text += f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞', '-')}\n\n"
            
            if len(current_part + result_text) > 4000:
                parts.append(current_part)
                current_part = result_text
            else:
                current_part += result_text
        
        if current_part:
            parts.append(current_part)
        
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(message)

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    state = user_states.get(user_id, {}).get('state')
    
    if state == 'send_notification' and user_states[user_id].get('action') == 'send_location':
        location = update.message.location
        tp_data = user_states[user_id].get('tp_data', {})
        selected_tp = user_states[user_id].get('selected_tp')
        selected_vl = user_states[user_id].get('selected_vl')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        branch = tp_data.get('–§–∏–ª–∏–∞–ª', '')
        res = tp_data.get('–†–≠–°', '')
        
        logger.info(f"–ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –§–∏–ª–∏–∞–ª: {branch}, –†–≠–°: {res}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        load_users_data()
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        responsible_users = []
        for tid, user_data in users_cache.items():
            responsible = user_data.get('responsible', '')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º –∏–ª–∏ –†–≠–°
            if responsible and (responsible.strip() == branch.strip() or responsible.strip() == res.strip()):
                responsible_users.append((tid, user_data))
                logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {tid} - {user_data['name']} (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞: {responsible})")
        
        if not responsible_users:
            await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {res} –†–≠–°")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞
            branch_name = user_states[user_id].get('branch')
            user_states[user_id] = {'state': f'branch_{branch_name}', 'branch': branch_name, 'network': user_states[user_id].get('network')}
            await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sender_permissions = get_user_permissions(user_id)
        sender_name = sender_permissions['name']
        
        success_count = 0
        failed_users = []
        
        for recipient_id, recipient_data in responsible_users:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"üîî {sender_name} –Ω–∞—à–µ–ª –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–° –Ω–∞ {selected_tp}, {selected_vl}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                await context.bot.send_location(
                    chat_id=recipient_id,
                    latitude=location.latitude,
                    longitude=location.longitude
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"{location.latitude}, {location.longitude}"
                )
                
                success_count += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = {
                    'branch': branch,
                    'res': res,
                    'sender_name': sender_name,
                    'sender_id': user_id,
                    'recipient_name': recipient_data['name'],
                    'recipient_id': recipient_id,
                    'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'coordinates': f"{location.latitude}, {location.longitude}",
                    'tp': selected_tp,
                    'vl': selected_vl
                }
                
                network = user_states[user_id].get('network')
                notifications_storage[network].append(notification)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
                if "Chat not found" in str(e):
                    failed_users.append(f"{recipient_data['name']} (–Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º)")
                else:
                    failed_users.append(f"{recipient_data['name']} ({str(e)})")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if success_count > 0 and not failed_users:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            success_names = []
            for recipient_id, recipient_data in responsible_users:
                if recipient_id not in [user.split(' (')[0] for user in failed_users]:
                    success_names.append(recipient_data['name'])
            
            await update.message.reply_text(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(responsible_users)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ {res} –†–≠–°\n\n"
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:\n" + "\n".join(f"‚Ä¢ {name}" for name in success_names)
            )
        elif success_count > 0 and failed_users:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            success_names = []
            for recipient_id, recipient_data in responsible_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö
                failed_ids = []
                for failed in failed_users:
                    if '(' in failed:
                        name_part = failed.split(' (')[0]
                        # –ò—â–µ–º ID —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for rid, rdata in responsible_users:
                            if rdata['name'] == name_part:
                                failed_ids.append(rid)
                                break
                
                if recipient_id not in failed_ids:
                    success_names.append(recipient_data['name'])
            
            await update.message.reply_text(
                f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(responsible_users)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ {res} –†–≠–°\n\n"
                f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(f"‚Ä¢ {name}" for name in success_names) + "\n\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n" + "\n".join(f"‚Ä¢ {user}" for user in failed_users)
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                f"–ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(f"‚Ä¢ {user}" for user in failed_users)
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞
        branch_name = user_states[user_id].get('branch')
        user_states[user_id] = {'state': f'branch_{branch_name}', 'branch': branch_name, 'network': user_states[user_id].get('network')}
        await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE, network: str, permissions: Dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    notifications = notifications_storage[network]
    
    if not notifications:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    if permissions['branch'] != 'All':
        notifications = [n for n in notifications if n['branch'] == permissions['branch']]
    
    if not notifications:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª–∏–∞–ª—É")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(notifications)
    df = df[['branch', 'res', 'sender_name', 'sender_id', 'recipient_name', 'recipient_id', 'datetime', 'coordinates']]
    df.columns = ['–§–ò–õ–ò–ê–õ', '–†–≠–°', '–§–ò–û –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø', 'ID –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø', '–§–ò–û –ü–û–õ–£–ß–ê–¢–ï–õ–Ø', 'ID –ü–û–õ–£–ß–ê–¢–ï–õ–Ø', '–í–†–ï–ú–Ø –î–ê–¢–ê', '–ö–û–û–†–î–ò–ù–ê–¢–´']
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', index=False)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
        
        # –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_format = workbook.add_format({
            'bg_color': '#FFE6E6',
            'bold': True,
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'center',
            'border': 1
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for i, col in enumerate(df.columns):
            column_len = df[col].astype(str).map(len).max()
            column_len = max(column_len, len(col)) + 2
            worksheet.set_column(i, i, column_len)
    
    output.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    network_name = "–†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨" if network == 'RK' else "–†–û–°–°–ï–¢–ò –Æ–ì"
    filename = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è_{network_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    await update.message.reply_document(
        document=output,
        filename=filename,
        caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º {network_name}"
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

async def check_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /checkuser <telegram_id>")
        return
    
    target_id = context.args[0]
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await context.bot.get_chat(chat_id=target_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            f"ID: {target_id}\n"
            f"–ò–º—è: {chat.first_name} {chat.last_name or ''}\n"
            f"Username: @{chat.username or '–Ω–µ—Ç'}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n"
            f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID"
        )
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /checkuser <telegram_id>")
        return
    
    target_id = context.args[0]
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await context.bot.get_chat(chat_id=target_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            f"ID: {target_id}\n"
            f"–ò–º—è: {chat.first_name} {chat.last_name or ''}\n"
            f"Username: @{chat.username or '–Ω–µ—Ç'}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n"
            f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID"
        )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("checkuser", check_user))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_error_handler(error_handler)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_users_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
        drop_pending_updates=True
    )
