import logging
import pandas as pd
import uvicorn
import asyncio
import re
import requests
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from config import (
    TOKEN, ZONES_CSV_URL, SELF_URL, PORT,
    YUGO_ZAPAD_URL_UG, CENTRAL_URL_UG, ZAPAD_URL_UG, VOSTOCH_URL_UG,
    YUZH_URL_UG, SEVERO_VOSTOCH_URL_UG, YUGO_VOSTOCH_URL_UG, SEVER_URL_UG,
    YUGO_ZAPAD_URL_RK, UST_LABINSK_URL_RK, TIMASHEVSK_URL_RK, TIKHORETSK_URL_RK,
    SOCHI_URL_RK, SLAVYANSK_URL_RK, LENINGRADSK_URL_RK, LABINSK_URL_RK,
    KRASNODAR_URL_RK, ARMAVIR_URL_RK, ADYGEYSK_URL_RK
)

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI()

# Initialize Telegram application
application = Application.builder().token(TOKEN).build()

# States for ConversationHandler
SEARCH_TP, SELECT_TP = range(2)

# Mapping of ES names to their URLs
ES_URL_MAPPING = {
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_UG": YUGO_ZAPAD_URL_UG,
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°": CENTRAL_URL_UG,
    "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": ZAPAD_URL_UG,
    "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": VOSTOCH_URL_UG,
    "–Æ–∂–Ω—ã–µ –≠–°": YUZH_URL_UG,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": SEVERO_VOSTOCH_URL_UG,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": YUGO_VOSTOCH_URL_UG,
    "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°": SEVER_URL_UG,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_RK": YUGO_ZAPAD_URL_RK,
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": UST_LABINSK_URL_RK,
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°": TIMASHEVSK_URL_RK,
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°": TIKHORETSK_URL_RK,
    "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°": SOCHI_URL_RK,
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°": SLAVYANSK_URL_RK,
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°": LENINGRADSK_URL_RK,
    "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": LABINSK_URL_RK,
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°": KRASNODAR_URL_RK,
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°": ARMAVIR_URL_RK,
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°": ADYGEYSK_URL_RK,
}

# Load user data from CSV for access control
def load_user_data():
    users = {}
    try:
        df = pd.read_csv(ZONES_CSV_URL, encoding="utf-8")
        for _, row in df.iterrows():
            users[str(row["Telegram ID"])] = {
                "Visibility": row["–í–∏–¥–∏–º–æ—Å—Ç—å"],
                "Branch": row["–§–∏–ª–∏–∞–ª"],
                "RES": row["–†–≠–°"],
                "FIO": row["–§–ò–û"],
                "Responsible": row["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return users

# Load TP data from ES-specific URL
def load_tp_data(es_name, is_rosseti_yug):
    suffix = "_UG" if is_rosseti_yug else "_RK"
    es_key = es_name if not es_name.startswith("–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°") else f"–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°{suffix}"
    url = ES_URL_MAPPING.get(es_key)
    if not url:
        logger.error(f"URL –¥–ª—è {es_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    try:
        response = requests.get(url)
        response.raise_for_status()
        df = pd.read_csv(url, encoding="utf-8")
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¢–ü –¥–ª—è {es_name}: {e}")
        return pd.DataFrame()

# Check user visibility for a specific menu item
def has_access(user_data, required_visibility):
    if not user_data:
        return False
    user_visibility = user_data.get("Visibility", "").lower()
    return (
        user_visibility == "all"
        or required_visibility.lower() == "all"
        or user_visibility == required_visibility.lower()
    )

# Define main menu buttons with visibility
MAIN_MENU = [
    {"text": "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å ‚ö°Ô∏è", "visibility": "all"},
    {"text": "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì üîå", "visibility": "all"},
    {"text": "–í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç—ã üìä", "visibility": "all"},
    {"text": "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû", "visibility": "all"},
    {"text": "–°–ø—Ä–∞–≤–∫–∞ ‚ùì", "visibility": "all"},
    {"text": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ", "visibility": "all"},
]

# Define Rosseti Yug submenu with visibility
ROSSETI_YUG_MENU = [
    {"text": "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "yugo_zapad_yug"},
    {"text": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°", "visibility": "central_yug"},
    {"text": "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "zapad_yug"},
    {"text": "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "vostoch_yug"},
    {"text": "–Æ–∂–Ω—ã–µ –≠–°", "visibility": "yuzh_yug"},
    {"text": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "severo_vostoch_yug"},
    {"text": "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "yugo_vostoch_yug"},
    {"text": "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°", "visibility": "sever_yug"},
    {"text": "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "visibility": "all"},
]

# Define Rosseti Kuban submenu with visibility
ROSSETI_KUBAN_MENU = [
    {"text": "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "yugo_zapad_kuban"},
    {"text": "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "ust_labinsk_kuban"},
    {"text": "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°", "visibility": "timashevsk_kuban"},
    {"text": "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°", "visibility": "tikhoretsk_kuban"},
    {"text": "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "sochi_kuban"},
    {"text": "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°", "visibility": "slavyansk_kuban"},
    {"text": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°", "visibility": "leningradsk_kuban"},
    {"text": "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "labinsk_kuban"},
    {"text": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°", "visibility": "krasnodar_kuban"},
    {"text": "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°", "visibility": "armavir_kuban"},
    {"text": "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°", "visibility": "adygeysk_kuban"},
    {"text": "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "visibility": "all"},
]

# Define ES submenu with visibility
ES_SUBMENU = [
    {"text": "–ü–æ–∏—Å–∫ –ø–æ –¢–ü üîç", "visibility": "all"},
    {"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ë–î –í–û–õ–° üì¨", "visibility": "all"},
    {"text": "–°–ø—Ä–∞–≤–∫–∞ ‚ùì", "visibility": "all"},
    {"text": "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "visibility": "all"},
]

# Build main menu based on user visibility
def build_main_menu(user_data):
    keyboard = [[button["text"]] for button in MAIN_MENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build Rosseti Yug submenu based on user visibility
def build_rosseti_yug_menu(user_data):
    keyboard = [[button["text"]] for button in ROSSETI_YUG_MENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build Rosseti Kuban submenu based on user visibility
def build_rosseti_kuban_menu(user_data):
    keyboard = [[button["text"]] for button in ROSSETI_KUBAN_MENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build ES submenu based on user visibility
def build_es_submenu(user_data):
    keyboard = [[button["text"]] for button in ES_SUBMENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build TP selection keyboard
def build_tp_selection_menu(tp_options):
    keyboard = [[tp] for tp in tp_options]
    keyboard.append(["–û—Ç–º–µ–Ω–∞ üö´"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Fuzzy search for TP
def fuzzy_search_tp(search_term, df):
    if not isinstance(search_term, str):
        return []
    # Normalize search term: remove hyphens, spaces, convert to lowercase
    search_term = re.sub(r'[- ]', '', search_term.lower())
    matches = []
    for tp in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].dropna().unique():
        if not isinstance(tp, str):
            continue
        # Normalize TP name
        normalized_tp = re.sub(r'[- ]', '', tp.lower())
        if search_term in normalized_tp:
            matches.append(tp)
    return matches

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    fio = user_data["FIO"]
    context.user_data["state"] = "MAIN_MENU"
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fio}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
    )
    return ConversationHandler.END

# Message handler for button presses
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    state = context.user_data.get("state", "MAIN_MENU")

    # Main menu actions
    if state == "MAIN_MENU":
        if text == "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å ‚ö°Ô∏è" and has_access(user_data, "all"):
            context.user_data["state"] = "ROSSETI_KUBAN"
            context.user_data["previous_state"] = "MAIN_MENU"
            context.user_data["is_rosseti_yug"] = False
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_kuban_menu(user_data)
            )
        elif text == "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì üîå" and has_access(user_data, "all"):
            context.user_data["state"] = "ROSSETI_YUG"
            context.user_data["previous_state"] = "MAIN_MENU"
            context.user_data["is_rosseti_yug"] = True
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_yug_menu(user_data)
            )
        elif text == "–í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç—ã üìä" and has_access(user_data, "all"):
            await update.message.reply_text("–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ üìä. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû" and has_access(user_data, "all"):
            await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "–°–ø—Ä–∞–≤–∫–∞ ‚ùì" and has_access(user_data, "all"):
            await update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞ ‚ùì. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ" and has_access(user_data, "all"):
            await update.message.reply_text("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    # Rosseti Yug submenu actions
    elif state == "ROSSETI_YUG":
        if text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è" and has_access(user_data, "all"):
            context.user_data["state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
            )
        else:
            for button in ROSSETI_YUG_MENU:
                if text == button["text"] and has_access(user_data, button["visibility"]):
                    context.user_data["state"] = "ES_SUBMENU"
                    context.user_data["selected_es"] = text
                    context.user_data["previous_state"] = "ROSSETI_YUG"
                    await update.message.reply_text(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_es_submenu(user_data)
                    )
                    return ConversationHandler.END
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≠–° –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    # Rosseti Kuban submenu actions
    elif state == "ROSSETI_KUBAN":
        if text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è" and has_access(user_data, "all"):
            context.user_data["state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
            )
        else:
            for button in ROSSETI_KUBAN_MENU:
                if text == button["text"] and has_access(user_data, button["visibility"]):
                    context.user_data["state"] = "ES_SUBMENU"
                    context.user_data["selected_es"] = text
                    context.user_data["previous_state"] = "ROSSETI_KUBAN"
                    await update.message.reply_text(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_es_submenu(user_data)
                    )
                    return ConversationHandler.END
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≠–° –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    # ES submenu actions
    elif state == "ES_SUBMENU":
        selected_es = context.user_data.get("selected_es", "")
        if text == "–ü–æ–∏—Å–∫ –ø–æ –¢–ü üîç" and has_access(user_data, "all"):
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ {selected_es}:", reply_markup=ReplyKeyboardRemove()
            )
            return SEARCH_TP
        elif text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ë–î –í–û–õ–° üì¨" and has_access(user_data, "all"):
            await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {selected_es} üì¨. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "–°–ø—Ä–∞–≤–∫–∞ ‚ùì" and has_access(user_data, "all"):
            await update.message.reply_text(f"–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è {selected_es} ‚ùì. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è" and has_access(user_data, "all"):
            previous_state = context.user_data.get("previous_state", "MAIN_MENU")
            context.user_data["state"] = previous_state
            if previous_state == "ROSSETI_YUG":
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_yug_menu(user_data))
            elif previous_state == "ROSSETI_KUBAN":
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_kuban_menu(user_data))
            else:
                context.user_data["state"] = "MAIN_MENU"
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

# Search TP handler
async def search_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    search_term = update.message.text
    selected_es = context.user_data.get("selected_es", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_data(selected_es, is_rosseti_yug)

    if df.empty:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=build_es_submenu(user_data)
        )
        context.user_data["state"] = "ES_SUBMENU"
        return ConversationHandler.END

    # Exact match
    exact_match = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == search_term]
    if not exact_match.empty:
        await send_tp_results(update, context, exact_match, selected_es)
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    # Fuzzy search
    tp_options = fuzzy_search_tp(search_term, df)
    if not tp_options:
        await update.message.reply_text(
            f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEARCH_TP

    context.user_data["tp_options"] = tp_options
    await update.message.reply_text(
        f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", 
        reply_markup=build_tp_selection_menu(tp_options)
    )
    return SELECT_TP

# Select TP handler
async def select_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    selected_es = context.user_data.get("selected_es", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_data(selected_es, is_rosseti_yug)

    if text == "–û—Ç–º–µ–Ω–∞ üö´":
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    if text in context.user_data.get("tp_options", []):
        df_filtered = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
        await send_tp_results(update, context, df_filtered, selected_es)
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¢–ü –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
        reply_markup=build_tp_selection_menu(context.user_data.get("tp_options", []))
    )
    return SELECT_TP

# Send TP results
async def send_tp_results(update: Update, context: ContextTypes.DEFAULT_TYPE, df, selected_es):
    count = len(df)
    await update.message.reply_text(f"–í {selected_es} –Ω–∞–π–¥–µ–Ω–æ {count} –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.")
    
    for _, row in df.iterrows():
        message = (
            f"üîå –í–õ: {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {row['–û–ø–æ—Ä—ã']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞']}"
        )
        await update.message.reply_text(message)

# Cancel search
async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)
    selected_es = context.user_data.get("selected_es", "")
    context.user_data["state"] = "ES_SUBMENU"
    await update.message.reply_text(
        f"–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", 
        reply_markup=build_es_submenu(user_data)
    )
    return ConversationHandler.END

# Error handler
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

# Webhook endpoint
@app.post("/webhook")
async def webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    if update:
        await application.process_update(update)
    return {"status": "ok"}

# Root endpoint for health check
@app.get("/")
async def root():
    return {"message": "Bot is running"}

# FastAPI startup event to set webhook
@app.on_event("startup")
async def on_startup():
    webhook_url = f"{SELF_URL}/webhook"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook set to {webhook_url}")
    await application.initialize()

# FastAPI shutdown event
@app.on_event("shutdown")
async def on_shutdown():
    await application.stop()

def main():
    # Conversation handler for TP search
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            SEARCH_TP: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_tp)],
            SELECT_TP: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_tp)],
        },
        fallbacks=[CommandHandler("cancel", cancel_search)],
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # Start FastAPI server
    uvicorn.run(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
