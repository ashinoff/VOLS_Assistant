import os
import asyncio
import logging
from enum import Enum
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import aiohttp
import aiofiles
import pandas as pd
import csv
import re
from datetime import datetime, timezone
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from config import TOKEN, SELF_URL, PORT, BRANCH_URLS, NOTIFY_URLS, ZONES_CSV_URL, NOTIFY_LOG_FILE_UG, NOTIFY_LOG_FILE_RK
from zones import normalize_sheet_url, load_zones_cached

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–æ–≤
class BotStep(Enum):
    INIT = "INIT"
    NET = "NET"
    BRANCH = "BRANCH"
    AWAIT_TP_INPUT = "AWAIT_TP_INPUT"
    NOTIFY_AWAIT_TP = "NOTIFY_AWAIT_TP"
    NOTIFY_VL = "NOTIFY_VL"
    NOTIFY_GEO = "NOTIFY_GEO"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_back = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_actions = ReplyKeyboardMarkup([["üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü"], ["üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], ["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
kb_request_location = ReplyKeyboardMarkup([[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], ["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def build_initial_kb(vis_flag: str, res_flag: str) -> ReplyKeyboardMarkup:
    f = vis_flag.strip().upper()
    nets = ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"] if f == "ALL" else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì"] if f == "UG" else ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]
    buttons = [[n] for n in nets]
    buttons.append(["üìñ –ü–æ–º–æ—â—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def get_cached_csv(context, url, cache_key, ttl=3600):
    if cache_key not in context.bot_data or context.bot_data[cache_key]["expires"] < time.time():
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(await normalize_sheet_url(url), timeout=10) as response:
                    response.raise_for_status()
                    df = pd.read_csv(BytesIO(await response.read()))
            context.bot_data[cache_key] = {"data": df, "expires": time.time() + ttl}
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
            raise
        except pd.errors.EmptyDataError:
            logger.error(f"CSV-—Ñ–∞–π–ª –ø—É—Å—Ç: {url}")
            raise
    return context.bot_data[cache_key]["data"]

async def log_notification(log_file, data):
    try:
        async with aiofiles.open(log_file, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f, quoting=csv.QUOTE_MINIMAL)
            await f.write(writer.writerow(data))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ {log_file}: {e}")

# === /start ===
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    try:
        vis_map, raw_branch_map, res_map, names, resp_map = await load_zones_cached(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω –¥–ª—è {uid}: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=kb_back)
        return
    if uid not in raw_branch_map:
        await update.message.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=kb_back)
        return

    raw = raw_branch_map[uid]
    branch_key = "All" if raw == "All" else raw
    context.user_data.clear()
    context.user_data.update({
        "step": BotStep.BRANCH.value if branch_key != "All" else BotStep.INIT.value,
        "vis_flag": vis_map[uid],
        "branch_user": branch_key,
        "res_user": res_map[uid],
        "name": names[uid],
        "resp_map": resp_map
    })

    if branch_key != "All":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
    else:
        await update.message.reply_text(f"üëã {names[uid]}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=build_initial_kb(vis_map[uid], res_map[uid]))

# === /help ===
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. /start ‚Äî –Ω–∞—á–∞—Ç—å.\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏ –¥–µ–π—Å—Ç–≤–∏–µ.\n3. –ü–æ–∏—Å–∫: –≤–≤–µ–¥–∏—Ç–µ –¢–ü (–¢–ü-123).\n4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –¢–ü, –í–õ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=kb_back
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if "step" not in context.user_data:
        await start_cmd(update, context)
        return
    try:
        vis_map, raw_branch_map, res_map, names, resp_map = await load_zones_cached(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=kb_back)
        return
    step = context.user_data["step"]
    vis_flag = context.user_data["vis_flag"]
    name = context.user_data["name"]

    if step == BotStep.INIT.value:
        if text == "üîô –ù–∞–∑–∞–¥":
            await start_cmd(update, context)
            return
        if text in ["‚ö° –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "‚ö° –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"]:
            context.user_data["step"] = BotStep.NET.value
            context.user_data["net"] = text.replace("‚ö° ", "")
            branches = list(BRANCH_URLS[context.user_data["net"]].keys())
            kb = ReplyKeyboardMarkup([[b] for b in branches] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)
            return
        await update.message.reply_text(f"{name}, –¥–æ—Å—Ç—É–ø–Ω—ã: {vis_flag}", reply_markup=build_initial_kb(vis_flag, ""))

    elif step == BotStep.NET.value:
        if text == "üîô –ù–∞–∑–∞–¥":
            await start_cmd(update, context)
            return
        if text in BRANCH_URLS[context.user_data["net"]]:
            context.user_data["step"] = BotStep.BRANCH.value
            context.user_data["branch"] = text
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        await update.message.reply_text("‚ö† –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_back)

    elif step == BotStep.BRANCH.value:
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü":
            context.user_data["step"] = BotStep.AWAIT_TP_INPUT.value
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¢–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–ü-123):", reply_markup=kb_back)
        elif text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
            context.user_data["step"] = BotStep.NOTIFY_AWAIT_TP.value
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)

    elif step == BotStep.AWAIT_TP_INPUT.value:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = BotStep.BRANCH.value
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        net = context.user_data["net"]
        branch = context.user_data["branch"]
        url = BRANCH_URLS[net][branch]
        if not url:
            await update.message.reply_text(f"‚ö† URL –¥–ª—è {branch} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back)
            return
        try:
            df = await get_cached_csv(context, url, f"{net}_{branch}")
            if not all(col in df.columns for col in ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü", "–†–≠–°", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"]):
                await update.message.reply_text("‚ö† CSV –±–µ–∑ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.", reply_markup=kb_back)
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {net}/{branch}: {e}")
            await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {e}", reply_markup=kb_back)
            return
        q = re.sub(r"\W", "", text.upper())
        found = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W", "", regex=True).str.contains(q)]
        if found.empty:
            await update.message.reply_text("–¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
            return
        await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ: {found['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'].iloc[0]}", reply_markup=kb_actions)
        context.user_data["step"] = BotStep.BRANCH.value

    elif step == BotStep.NOTIFY_AWAIT_TP.value:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = BotStep.BRANCH.value
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_actions)
            return
        net = context.user_data["net"]
        branch = context.user_data["branch"]
        url = NOTIFY_URLS[net][branch]
        if not url:
            await update.message.reply_text(f"‚ö† URL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {branch} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_back)
            return
        try:
            df = await get_cached_csv(context, url, f"notify_{net}_{branch}")
            if not all(col in df.columns for col in ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü", "–†–≠–°", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"]):
                await update.message.reply_text("‚ö† CSV —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤.", reply_markup=kb_back)
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {net}/{branch}: {e}")
            await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {e}", reply_markup=kb_back)
            return
        q = re.sub(r"\W", "", text.upper())
        found = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].str.upper().str.replace(r"\W", "", regex=True).str.contains(q)]
        if found.empty:
            await update.message.reply_text("–¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back)
            return
        context.user_data["tp"] = found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].iloc[0]
        context.user_data["step"] = BotStep.NOTIFY_VL.value
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –í–õ:", reply_markup=ReplyKeyboardMarkup([[vl] for vl in found["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].unique()] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True))

    elif step == BotStep.NOTIFY_VL.value:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data["step"] = BotStep.NOTIFY_AWAIT_TP.value
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=kb_back)
            return
        context.user_data["vl"] = text
        context.user_data["step"] = BotStep.NOTIFY_GEO.value
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb_request_location)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("step") != BotStep.NOTIFY_GEO.value:
        return
    loc = update.message.location
    tp = context.user_data["tp"]
    vl = context.user_data["vl"]
    net = context.user_data["net"]
    branch = context.user_data["branch"]
    try:
        vis_map, raw_branch_map, res_map, names, resp_map = await load_zones_cached(context)
        res_tp = next((r for r in res_map.values() if r), "")
        sender = context.user_data["name"]
        recipients = [uid for uid, r in resp_map.items() if r and r.strip().lower() == res_tp.strip().lower()]
        msg = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender}, {res_tp} –†–≠–°, {tp}, {vl} ‚Äì –ë–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°"
        log_f = NOTIFY_LOG_FILE_UG if net == "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" else NOTIFY_LOG_FILE_RK
        for cid in recipients:
            await context.bot.send_message(cid, msg)
            await context.bot.send_location(cid, loc.latitude, loc.longitude)
            await context.bot.send_message(cid, f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}")
            await log_notification(log_f, [branch, res_tp, update.effective_user.id, sender, cid, resp_map.get(cid, ""), datetime.now(timezone.utc).isoformat(), f"{loc.latitude:.6f},{loc.longitude:.6f}"])
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {', '.join(recipients)}", reply_markup=kb_actions)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=kb_actions)
    context.user_data["step"] = BotStep.BRANCH.value

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = ApplicationBuilder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
application.add_handler(MessageHandler(filters.LOCATION, location_handler))

if __name__ == "__main__":
    try:
        if SELF_URL:
            application.run_webhook(listen="0.0.0.0", port=PORT, url_path="webhook", webhook_url=f"{SELF_URL}/webhook")
        else:
            logger.warning("SELF_URL –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—é polling")
            application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
