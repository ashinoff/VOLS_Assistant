import os
import logging
import csv
import io
import re
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from flask import Flask, request
import pandas as pd
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è webhook
app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
PORT = int(os.environ.get('PORT', 5000))
ZONES_CSV_URL = os.environ.get('ZONES_CSV_URL')

# –°–ø–∏—Å–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
ROSSETI_KUBAN_BRANCHES = [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°", "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°", "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°", "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°", "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°", "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°"
]

ROSSETI_YUG_BRANCHES = [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°", "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–µ –≠–°", "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notifications_storage = {
    'RK': [],
    'UG': []
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_cache = {}

def get_env_key_for_branch(branch: str, network: str, is_reference: bool = False) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞"""
    branch_key = branch.upper().replace(' ', '_').replace('-', '_')
    suffix = f"_{network}_SP" if is_reference else f"_{network}"
    return f"{branch_key}_URL{suffix}"

def load_csv_from_url(url: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª –ø–æ URL"""
    try:
        response = requests.get(url)
        response.raise_for_status()
        response.encoding = 'utf-8-sig'
        
        csv_file = io.StringIO(response.text)
        reader = csv.DictReader(csv_file)
        return list(reader)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        return []

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV"""
    global users_cache
    try:
        data = load_csv_from_url(ZONES_CSV_URL)
        users_cache = {}
        for row in data:
            telegram_id = row.get('Telegram ID', '').strip()
            if telegram_id:
                users_cache[telegram_id] = {
                    'visibility': row.get('–í–∏–¥–∏–º–æ—Å—Ç—å', '').strip(),
                    'branch': row.get('–§–∏–ª–∏–∞–ª', '').strip(),
                    'res': row.get('–†–≠–°', '').strip(),
                    'name': row.get('–§–ò–û', '').strip(),
                    'responsible': row.get('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', '').strip()
                }
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def get_user_permissions(user_id: str) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not users_cache:
        load_users_data()
    
    return users_cache.get(str(user_id), {
        'visibility': None,
        'branch': None,
        'res': None,
        'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
        'responsible': None
    })

def normalize_tp_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    return ''.join(filter(str.isdigit, name))

def search_tp_in_data(tp_query: str, data: List[Dict], column: str) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –¢–ü –≤ –¥–∞–Ω–Ω—ã—Ö"""
    normalized_query = normalize_tp_name(tp_query)
    results = []
    
    for row in data:
        tp_name = row.get(column, '')
        normalized_tp = normalize_tp_name(tp_name)
        
        if normalized_query in normalized_tp:
            results.append(row)
    
    return results

def get_main_keyboard(permissions: Dict) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤"""
    keyboard = []
    
    visibility = permissions.get('visibility')
    branch = permissions.get('branch')
    res = permissions.get('res')
    
    # –†–û–°–°–ï–¢–ò –∫–Ω–æ–ø–∫–∏
    if visibility == 'All':
        keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –Æ–ì'])
    elif visibility == 'RK':
        if branch == 'All':
            keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        else:
            keyboard.append([f'üè≠ {branch}'])
    elif visibility == 'UG':
        if branch == 'All':
            keyboard.append(['üè¢ –†–û–°–°–ï–¢–ò –Æ–ì'])
        else:
            keyboard.append([f'üè≠ {branch}'])
    
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    keyboard.append(['üìû –¢–ï–õ–ï–§–û–ù–´ –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í'])
    
    # –û—Ç—á–µ—Ç—ã
    if res == 'All':
        if visibility == 'All':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
        elif visibility == 'RK':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
        elif visibility == 'UG':
            keyboard.append(['üìä –û–¢–ß–ï–¢–´'])
    
    # –°–ø—Ä–∞–≤–∫–∞
    keyboard.append(['‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê'])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_branch_keyboard(branches: List[str]) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏"""
    keyboard = []
    for i in range(0, len(branches), 2):
        row = [f'üè≠ {branches[i]}']
        if i + 1 < len(branches):
            row.append(f'üè≠ {branches[i+1]}')
        keyboard.append(row)
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_branch_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞"""
    keyboard = [
        ['üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü'],
        ['üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'],
        ['‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_reports_keyboard(permissions: Dict) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = []
    visibility = permissions.get('visibility')
    
    if visibility == 'All':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì'])
    elif visibility == 'RK':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨'])
    elif visibility == 'UG':
        keyboard.append(['üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì'])
    
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_reference_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    keyboard = [
        ['üìÑ –§–æ—Ä–º–∞ –¥–æ–ø —Å–æ–≥–ª–∞—à–µ–Ω–∏—è'],
        ['üìÑ –§–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    permissions = get_user_permissions(user_id)
    
    if not permissions['visibility']:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤."
        )
        return
    
    user_states[user_id] = {'state': 'main'}
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {permissions['name']}!\n"
        f"–í–∞—à–∏ –ø—Ä–∞–≤–∞: {permissions['visibility']} | {permissions['branch']} | {permissions['res']}",
        reply_markup=get_main_keyboard(permissions)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    permissions = get_user_permissions(user_id)
    
    if not permissions['visibility']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return
    
    state = user_states.get(user_id, {}).get('state', 'main')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    if text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if state in ['rosseti_kuban', 'rosseti_yug', 'reports', 'reference', 'phones']:
            user_states[user_id] = {'state': 'main'}
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(permissions))
        elif state.startswith('branch_'):
            network = user_states[user_id].get('network')
            if network == 'RK':
                user_states[user_id] = {'state': 'rosseti_kuban', 'network': 'RK'}
                branches = ROSSETI_KUBAN_BRANCHES
            else:
                user_states[user_id] = {'state': 'rosseti_yug', 'network': 'UG'}
                branches = ROSSETI_YUG_BRANCHES
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª", reply_markup=get_branch_keyboard(branches))
        elif state in ['search_tp', 'send_notification']:
            branch = user_states[user_id].get('branch')
            user_states[user_id]['state'] = f'branch_{branch}'
            await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if state == 'main':
        if text == 'üè¢ –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨':
            if permissions['visibility'] in ['All', 'RK']:
                if permissions['branch'] == 'All':
                    user_states[user_id] = {'state': 'rosseti_kuban', 'network': 'RK'}
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨",
                        reply_markup=get_branch_keyboard(ROSSETI_KUBAN_BRANCHES)
                    )
                else:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∏–ª–∏–∞–ª
                    user_states[user_id] = {'state': f'branch_{permissions["branch"]}', 'branch': permissions['branch'], 'network': 'RK'}
                    await update.message.reply_text(
                        f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {permissions['branch']}",
                        reply_markup=get_branch_menu_keyboard()
                    )
        
        elif text == 'üè¢ –†–û–°–°–ï–¢–ò –Æ–ì':
            if permissions['visibility'] in ['All', 'UG']:
                if permissions['branch'] == 'All':
                    user_states[user_id] = {'state': 'rosseti_yug', 'network': 'UG'}
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –†–û–°–°–ï–¢–ò –Æ–ì",
                        reply_markup=get_branch_keyboard(ROSSETI_YUG_BRANCHES)
                    )
                else:
                    user_states[user_id] = {'state': f'branch_{permissions["branch"]}', 'branch': permissions['branch'], 'network': 'UG'}
                    await update.message.reply_text(
                        f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {permissions['branch']}",
                        reply_markup=get_branch_menu_keyboard()
                    )
        
        elif text == 'üìä –û–¢–ß–ï–¢–´':
            user_states[user_id] = {'state': 'reports'}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞",
                reply_markup=get_reports_keyboard(permissions)
            )
        
        elif text == '‚ÑπÔ∏è –°–ü–†–ê–í–ö–ê':
            user_states[user_id] = {'state': 'reference'}
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
                reply_markup=get_reference_keyboard()
            )
        
        elif text == 'üìû –¢–ï–õ–ï–§–û–ù–´ –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í':
            await update.message.reply_text("üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    elif state in ['rosseti_kuban', 'rosseti_yug']:
        if text.startswith('üè≠ '):
            branch = text[2:]
            user_states[user_id]['state'] = f'branch_{branch}'
            user_states[user_id]['branch'] = branch
            await update.message.reply_text(
                f"–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞ {branch}",
                reply_markup=get_branch_menu_keyboard()
            )
    
    # –ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞
    elif state.startswith('branch_'):
        if text == 'üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü':
            user_states[user_id]['state'] = 'search_tp'
            user_states[user_id]['action'] = 'search'
            keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
            await update.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –ù-6477, 6-47, 6477, 477",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        
        elif text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ':
            user_states[user_id]['state'] = 'send_notification'
            user_states[user_id]['action'] = 'notification_tp'
            keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
            await update.message.reply_text(
                "üì® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –ù-6477, 6-47, 6477, 477",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        
        elif text == '‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞':
            user_states[user_id]['state'] = 'reference'
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
                reply_markup=get_reference_keyboard()
            )
    
    # –ü–æ–∏—Å–∫ –¢–ü
    elif state == 'search_tp' and user_states[user_id].get('action') == 'search':
        branch = user_states[user_id].get('branch')
        network = user_states[user_id].get('network')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–∞
        env_key = get_env_key_for_branch(branch, network)
        csv_url = os.environ.get(env_key)
        
        if not csv_url:
            await update.message.reply_text(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        data = load_csv_from_url(csv_url)
        results = search_tp_in_data(text, data, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü')
        
        if not results:
            await update.message.reply_text("‚ùå –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¢–ü
        tp_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] for r in results]))
        
        if len(tp_list) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –¢–ü, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await show_tp_results(update, results, tp_list[0])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¢–ü
            keyboard = []
            for tp in tp_list[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                keyboard.append([tp])
            keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
            
            user_states[user_id]['search_results'] = results
            user_states[user_id]['action'] = 'select_tp'
            
            await update.message.reply_text(
                f"–ù–∞–π–¥–µ–Ω–æ {len(tp_list)} –¢–ü. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
    
    # –í—ã–±–æ—Ä –¢–ü –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    elif state == 'search_tp' and user_states[user_id].get('action') == 'select_tp':
        results = user_states[user_id].get('search_results', [])
        filtered_results = [r for r in results if r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == text]
        
        if filtered_results:
            await show_tp_results(update, filtered_results, text)
            user_states[user_id]['action'] = 'search'
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∏—Å–∫ –¢–ü
    elif state == 'send_notification' and user_states[user_id].get('action') == 'notification_tp':
        branch = user_states[user_id].get('branch')
        network = user_states[user_id].get('network')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        env_key = get_env_key_for_branch(branch, network, is_reference=True)
        csv_url = os.environ.get(env_key)
        
        if not csv_url:
            await update.message.reply_text(f"‚ùå –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        data = load_csv_from_url(csv_url)
        results = search_tp_in_data(text, data, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü')
        
        if not results:
            await update.message.reply_text("‚ùå –¢–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¢–ü
        tp_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] for r in results]))
        
        keyboard = []
        for tp in tp_list[:10]:
            keyboard.append([tp])
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        user_states[user_id]['notification_results'] = results
        user_states[user_id]['action'] = 'select_notification_tp'
        
        await update.message.reply_text(
            f"–ù–∞–π–¥–µ–Ω–æ {len(tp_list)} –¢–ü. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    # –í—ã–±–æ—Ä –¢–ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    elif state == 'send_notification' and user_states[user_id].get('action') == 'select_notification_tp':
        results = user_states[user_id].get('notification_results', [])
        filtered_results = [r for r in results if r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'] == text]
        
        if filtered_results:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¢–ü
            user_states[user_id]['selected_tp'] = text
            user_states[user_id]['tp_data'] = filtered_results[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–õ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¢–ü
            vl_list = list(set([r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ'] for r in filtered_results]))
            
            keyboard = []
            for vl in vl_list:
                keyboard.append([vl])
            keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
            
            user_states[user_id]['action'] = 'select_vl'
            
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è –¢–ü {text}:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
    
    # –í—ã–±–æ—Ä –í–õ
    elif state == 'send_notification' and user_states[user_id].get('action') == 'select_vl':
        user_states[user_id]['selected_vl'] = text
        user_states[user_id]['action'] = 'send_location'
        
        keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        
        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    # –û—Ç—á–µ—Ç—ã
    elif state == 'reports':
        if text == 'üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨':
            await generate_report(update, context, 'RK', permissions)
        elif text == 'üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –†–û–°–°–ï–¢–ò –Æ–ì':
            await generate_report(update, context, 'UG', permissions)
    
    # –°–ø—Ä–∞–≤–∫–∞
    elif state == 'reference':
        if text == 'üìÑ –§–æ—Ä–º–∞ –¥–æ–ø —Å–æ–≥–ª–∞—à–µ–Ω–∏—è':
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å Google Drive
            await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        elif text == 'üìÑ –§–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏':
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å Google Drive
            await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")

async def show_tp_results(update: Update, results: List[Dict], tp_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –¢–ü"""
    res_name = results[0].get('–†–≠–°', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    message = f"üìç {res_name} –†–≠–°, –Ω–∞ {tp_name} –Ω–∞–π–¥–µ–Ω–æ {len(results)} –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.\n\n"
    
    for result in results:
        vl = result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ', '-')
        supports = result.get('–û–ø–æ—Ä—ã', '-')
        supports_count = result.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä', '-')
        provider = result.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞', '-')
        
        message += f"‚ö° –í–õ: {vl}\n"
        message += f"–û–ø–æ—Ä—ã: {supports}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä: {supports_count}\n"
        message += f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {provider}\n\n"
    
    await update.message.reply_text(message)

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    state = user_states.get(user_id, {}).get('state')
    
    if state == 'send_notification' and user_states[user_id].get('action') == 'send_location':
        location = update.message.location
        tp_data = user_states[user_id].get('tp_data', {})
        selected_tp = user_states[user_id].get('selected_tp')
        selected_vl = user_states[user_id].get('selected_vl')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        branch = tp_data.get('–§–∏–ª–∏–∞–ª', '')
        res = tp_data.get('–†–≠–°', '')
        
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        responsible_users = []
        for tid, user_data in users_cache.items():
            if user_data['responsible'] in [branch, res]:
                responsible_users.append((tid, user_data))
        
        if not responsible_users:
            await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {res} –†–≠–°")
            user_states[user_id] = {'state': f'branch_{user_states[user_id]["branch"]}'}
            await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sender_permissions = get_user_permissions(user_id)
        sender_name = sender_permissions['name']
        
        for recipient_id, recipient_data in responsible_users:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"üîî {sender_name} –Ω–∞—à–µ–ª –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–° –Ω–∞ {selected_tp}, {selected_vl}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                await context.bot.send_location(
                    chat_id=recipient_id,
                    latitude=location.latitude,
                    longitude=location.longitude
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.latitude}, {location.longitude}"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = {
                    'branch': branch,
                    'res': res,
                    'sender_name': sender_name,
                    'sender_id': user_id,
                    'recipient_name': recipient_data['name'],
                    'recipient_id': recipient_id,
                    'datetime': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'coordinates': f"{location.latitude}, {location.longitude}",
                    'tp': selected_tp,
                    'vl': selected_vl
                }
                
                network = user_states[user_id].get('network')
                notifications_storage[network].append(notification)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–∞ {res} –†–≠–°")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞
        user_states[user_id] = {'state': f'branch_{user_states[user_id]["branch"]}'}
        await update.message.reply_text("–ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–∞", reply_markup=get_branch_menu_keyboard())

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE, network: str, permissions: Dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    notifications = notifications_storage[network]
    
    if not notifications:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    if permissions['branch'] != 'All':
        notifications = [n for n in notifications if n['branch'] == permissions['branch']]
    
    if not notifications:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª–∏–∞–ª—É")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(notifications)
    df = df[['branch', 'res', 'sender_name', 'sender_id', 'recipient_name', 'recipient_id', 'datetime', 'coordinates']]
    df.columns = ['–§–ò–õ–ò–ê–õ', '–†–≠–°', '–§–ò–û –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø', 'ID –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø', '–§–ò–û –ü–û–õ–£–ß–ê–¢–ï–õ–Ø', 'ID –ü–û–õ–£–ß–ê–¢–ï–õ–Ø', '–í–†–ï–ú–Ø –î–ê–¢–ê', '–ö–û–û–†–î–ò–ù–ê–¢–´']
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', index=False)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
        
        # –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_format = workbook.add_format({
            'bg_color': '#FFE6E6',
            'bold': True,
            'text_wrap': True,
            'valign': 'vcenter',
            'align': 'center',
            'border': 1
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for i, col in enumerate(df.columns):
            column_len = df[col].astype(str).map(len).max()
            column_len = max(column_len, len(col)) + 2
            worksheet.set_column(i, i, column_len)
    
    output.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    network_name = "–†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨" if network == 'RK' else "–†–û–°–°–ï–¢–ò –Æ–ì"
    filename = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è_{network_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    await update.message.reply_document(
        document=output,
        filename=filename,
        caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º {network_name}"
    )

# Webhook handler
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    """Handle incoming Telegram updates via webhook"""
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return 'OK'

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return 'OK', 200

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = None

def setup_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global application
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_users_data()
    
    return application

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = setup_application()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=PORT)
