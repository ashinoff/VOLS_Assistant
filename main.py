async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE, network: str, permissions: Dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    try:
        user_id = str(update.effective_user.id)
        notifications = notifications_storage[network]
        
        if not notifications:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
        if permissions['branch'] != 'All':
            notifications = [n for n in notifications if n['branch'] == permissions['branch']]
        
        if not notifications:
            await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª–∏–∞–ª—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(notifications)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['branch', 'res', 'sender_name', 'sender_id', 'recipient_name', 'recipient_id', 'datetime', 'coordinates']
        existing_columns = [col for col in required_columns if col in df.columns]
        
        if not existing_columns:
            await update.message.reply_text("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            return
            
        df = df[existing_columns]
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        column_mapping = {
            'branch': '–§–ò–õ–ò–ê–õ',
            'res': '–†–≠–°', 
            'sender_name': '–§–ò–û –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø',
            'sender_id': 'ID –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø',
            'recipient_name': '–§–ò–û –ü–û–õ–£–ß–ê–¢–ï–õ–Ø',
            'recipient_id': 'ID –ü–û–õ–£–ß–ê–¢–ï–õ–Ø',
            'datetime': '–í–†–ï–ú–Ø –î–ê–¢–ê',
            'coordinates': '–ö–û–û–†–î–ò–ù–ê–¢–´'
        }
        df.rename(columns=column_mapping, inplace=True)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, sheet_name='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', index=False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            workbook = writer.book
            worksheet = writer.sheets['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
            
            # –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_format = workbook.add_format({
                'bg_color': '#FFE6E6',
                'bold': True,
                'text_wrap': True,
                'valign': 'vcenter',
                'align': 'center',
                'border': 1
            })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for i, col in enumerate(df.columns):
                column_len = df[col].astype(str).map(len).max()
                column_len = max(column_len, len(col)) + 2
                worksheet.set_column(i, i, column_len)
        
        # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        network_name = "–†–û–°–°–ï–¢–ò –ö–£–ë–ê–ù–¨" if network == 'RK' else "–†–û–°–°–ï–¢–ò –Æ–ì"
        filename = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è_{network_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        # –°–æ–∑–¥–∞–µ–º InputFile –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        from telegram import InputFile
        
        await update.message.reply_document(
            document=InputFile(output, filename=filename),
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º {network_name}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        output.seek(0)
        last_reports[user_id] = {
            'data': BytesIO(output.read()),
            'filename': filename,
            'type': f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {network_name}",
            'datetime': datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_data = users_cache.get(user_id, {})
        user_email = user_data.get('email', '')
        email_enabled = user_email_settings.get(user_id, {}).get('enabled', True)
        
        if user_email and email_enabled:
            output.seek(0)
            subject = f"–û—Ç—á–µ—Ç –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º {network_name}"
            body = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å!

–ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º –æ—Ç—á–µ—Ç –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º {network_name} –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}.

–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–µ: {len(df)}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ë–æ—Ç –í–û–õ–° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
            
            if await send_email(user_email, subject, body, output, filename):
                await update.message.reply_text(f"üìß –û—Ç—á–µ—Ç —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user_email}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ email")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

# –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –ø–æ—á—Ç—É –≤ handle_message
# –ù–∞–π–¥–∏—Ç–µ –±–ª–æ–∫ —Å text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –Ω–∞ –ø–æ—á—Ç—É' –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:

        elif text == 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –Ω–∞ –ø–æ—á—Ç—É':
            user_data = users_cache.get(user_id, {})
            user_email = user_data.get('email', '')
            
            if not user_email:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω email –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_report = last_reports.get(user_id)
            
            if last_report:
                report_data = last_report['data']
                report_name = last_report['filename']
                report_type = last_report['type']
                
                subject = f"–û—Ç—á–µ—Ç: {report_name}"
                body = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user_data.get('name', '')}!

–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.

–¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}
–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {last_report['datetime']}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ë–æ—Ç –í–û–õ–° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
                
                # –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                report_data.seek(0)
                
                if await send_email(user_email, subject, body, report_data, report_name):
                    await update.message.reply_text(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user_email}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
