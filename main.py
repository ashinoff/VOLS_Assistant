import logging
import pandas as pd
import uvicorn
import asyncio
import re
import requests
import sqlite3
import datetime
import os
from fastapi import FastAPI, Request, HTTPException
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from config import (
    TOKEN, ZONES_CSV_URL, SELF_URL, PORT,
    YUGO_ZAPAD_URL_UG, CENTRAL_URL_UG, ZAPAD_URL_UG, VOSTOCH_URL_UG,
    YUZH_URL_UG, SEVERO_VOSTOCH_URL_UG, YUGO_VOSTOCH_URL_UG, SEVER_URL_UG,
    YUGO_ZAPAD_URL_RK, UST_LABINSK_URL_RK, TIMASHEVSK_URL_RK, TIKHORETSK_URL_RK,
    SOCHI_URL_RK, SLAVYANSK_URL_RK, LENINGRADSK_URL_RK, LABINSK_URL_RK,
    KRASNODAR_URL_RK, ARMAVIR_URL_RK, ADYGEYSK_URL_RK,
    YUGO_ZAPAD_URL_UG_SP, CENTRAL_URL_UG_SP, ZAPAD_URL_UG_SP, VOSTOCH_URL_UG_SP,
    YUZH_URL_UG_SP, SEVERO_VOSTOCH_URL_UG_SP, YUGO_VOSTOCH_URL_UG_SP, SEVER_URL_UG_SP,
    YUGO_ZAPAD_URL_RK_SP, UST_LABINSK_URL_RK_SP, TIMASHEVSK_URL_RK_SP, TIKHORETSK_URL_RK_SP,
    SOCHI_URL_RK_SP, SLAVYANSK_URL_RK_SP, LENINGRADSK_URL_RK_SP, LABINSK_URL_RK_SP,
    KRASNODAR_URL_RK_SP, ARMAVIR_URL_RK_SP, ADYGEYSK_URL_RK_SP
)

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI()

# Initialize Telegram application
application = Application.builder().token(TOKEN).build()

# States for ConversationHandler (changed to strings)
SEARCH_TP = "search_tp"
SELECT_TP = "select_tp"
NOTIFY_TP = "notify_tp"
NOTIFY_VL = "notify_vl"
NOTIFY_GEO = "notify_geo"
REPORTS_MENU = "reports_menu"

# SQLite database setup
def init_db():
    conn = sqlite3.connect("notifications.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notifications_yug (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            branch TEXT,
            res TEXT,
            sender_fio TEXT,
            sender_id TEXT,
            receiver_fio TEXT,
            receiver_id TEXT,
            timestamp TEXT,
            coordinates TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notifications_kuban (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            branch TEXT,
            res TEXT,
            sender_fio TEXT,
            sender_id TEXT,
            receiver_fio TEXT,
            receiver_id TEXT,
            timestamp TEXT,
            coordinates TEXT
        )
    """)
    conn.commit()
    conn.close()

# Mapping of ES names to their URLs for TP search
ES_URL_MAPPING = {
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_UG": YUGO_ZAPAD_URL_UG,
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°": CENTRAL_URL_UG,
    "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": ZAPAD_URL_UG,
    "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": VOSTOCH_URL_UG,
    "–Æ–∂–Ω—ã–µ –≠–°": YUZH_URL_UG,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": SEVERO_VOSTOCH_URL_UG,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": YUGO_VOSTOCH_URL_UG,
    "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°": SEVER_URL_UG,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_RK": YUGO_ZAPAD_URL_RK,
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": UST_LABINSK_URL_RK,
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°": TIMASHEVSK_URL_RK,
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°": TIKHORETSK_URL_RK,
    "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°": SOCHI_URL_RK,
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°": SLAVYANSK_URL_RK,
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°": LENINGRADSK_URL_RK,
    "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": LABINSK_URL_RK,
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°": KRASNODAR_URL_RK,
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°": ARMAVIR_URL_RK,
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°": ADYGEYSK_URL_RK,
}

# Mapping of ES names to their URLs for notification directory
ES_SP_URL_MAPPING = {
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_UG": YUGO_ZAPAD_URL_UG_SP,
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°": CENTRAL_URL_UG_SP,
    "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": ZAPAD_URL_UG_SP,
    "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": VOSTOCH_URL_UG_SP,
    "–Æ–∂–Ω—ã–µ –≠–°": YUZH_URL_UG_SP,
    "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": SEVERO_VOSTOCH_URL_UG_SP,
    "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": YUGO_VOSTOCH_URL_UG_SP,
    "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°": SEVER_URL_UG_SP,
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°_RK": YUGO_ZAPAD_URL_RK_SP,
    "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": UST_LABINSK_URL_RK_SP,
    "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°": TIMASHEVSK_URL_RK_SP,
    "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°": TIKHORETSK_URL_RK_SP,
    "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°": SOCHI_URL_RK_SP,
    "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°": SLAVYANSK_URL_RK_SP,
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°": LENINGRADSK_URL_RK_SP,
    "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": LABINSK_URL_RK_SP,
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°": KRASNODAR_URL_RK_SP,
    "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°": ARMAVIR_URL_RK_SP,
    "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°": ADYGEYSK_URL_RK_SP,
}

# Load user data from CSV for access control
def load_user_data():
    users = {}
    try:
        df = pd.read_csv(ZONES_CSV_URL, encoding="utf-8")
        for _, row in df.iterrows():
            users[str(row["Telegram ID"])] = {
                "Visibility": row["–í–∏–¥–∏–º–æ—Å—Ç—å"],
                "Branch": row["–§–∏–ª–∏–∞–ª"],
                "RES": row["–†–≠–°"],
                "FIO": row["–§–ò–û"],
                "Responsible": row["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"],
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return users

# Load TP data from ES-specific URL
def load_tp_data(es_name, is_rosseti_yug):
    suffix = "_UG" if is_rosseti_yug else "_RK"
    es_key = es_name if not es_name.startswith("–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°") else f"–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°{suffix}"
    url = ES_URL_MAPPING.get(es_key)
    if not url:
        logger.error(f"URL –¥–ª—è {es_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    try:
        response = requests.get(url)
        response.raise_for_status()
        df = pd.read_csv(url, encoding="utf-8")
        return dfAbstract
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¢–ü –¥–ª—è {es_name}: {e}")
        return pd.DataFrame()

# Load TP directory data for notifications
def load_tp_directory_data(es_name, is_rosseti_yug):
    suffix = "_UG" if is_rosseti_yug else "_RK"
    es_key = es_name if not es_name.startswith("–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°") else f"–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°{suffix}"
    url = ES_SP_URL_MAPPING.get(es_key)
    if not url:
        logger.error(f"URL —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è {es_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    try:
        response = requests.get(url)
        response.raise_for_status()
        df = pd.read_csv(url, encoding="utf-8")
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è {es_name}: {e}")
        return pd.DataFrame()

# Find responsible user for RES
def find_responsible(res, users):
    for user_id, user_data in users.items():
        if user_data["Responsible"] == res:
            return user_id, user_data["FIO"]
    return None, None

# Check user visibility for a specific menu item
def has_access(user_data, required_visibility, required_branch=None):
    if not user_data:
        return False
    user_visibility = user_data.get("Visibility", "").lower()
    user_branch = user_data.get("Branch", "").lower()

    if user_visibility not in ["all", "rk", "ug"]:
        return False
    if required_visibility.lower() == "all":
        visibility_match = True
    elif required_visibility.lower() in ["rk", "ug"]:
        visibility_match = user_visibility in ["all", required_visibility.lower()]
    else:
        visibility_match = False

    if required_branch:
        required_branch = required_branch.lower()
        branch_match = user_branch in ["all", required_branch]
    else:
        branch_match = True

    return visibility_match and branch_match

# Define main menu buttons with visibility
MAIN_MENU = [
    {"text": "‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "visibility": "UG"},
    {"text": "‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å", "visibility": "RK"},
    {"text": "üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç—ã", "visibility": "All"},
    {"text": "üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", "visibility": "All"},
    {"text": "üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "visibility": "All"},
    {"text": "üìö –°–ø—Ä–∞–≤–∫–∞", "visibility": "All"},
    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "visibility": "All"},
]

# Define Rosseti Yug submenu with visibility and branch
ROSSETI_YUG_MENU = [
    {"text": "‚ö°Ô∏è –Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –Æ–∂–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–Æ–∂–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –°–µ–≤–µ—Ä–Ω—ã–µ –≠–°", "visibility": "UG", "branch": "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°"},
    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "visibility": "All"},
]

# Define Rosseti Kuban submenu with visibility and branch
ROSSETI_KUBAN_MENU = [
    {"text": "‚ö°Ô∏è –Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°", "visibility": "RK", "branch": "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°"},
    {"text": "‚ö°Ô∏è –£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°"},
    {"text": "‚ö°Ô∏è –ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°", "visibility": "RK", "branch": "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°"},
    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "visibility": "All"},
]

# Define ES submenu with visibility
ES_SUBMENU = [
    {"text": "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü", "visibility": "All"},
    {"text": "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "visibility": "All"},
    {"text": "üìö –°–ø—Ä–∞–≤–∫–∞", "visibility": "All"},
    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "visibility": "All"},
]

# Define Reports submenu
REPORTS_MENU = [
    {"text": "üì§ –í—ã–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –†–æ—Å—Å–µ—Ç–∏ –Æ–ì", "visibility": "UG"},
    {"text": "üì§ –í—ã–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å", "visibility": "RK"},
    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "visibility": "All"},
]

# Build main menu based on user visibility
def build_main_menu(user_data):
    keyboard = [[button["text"]] for button in MAIN_MENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build Rosseti Yug submenu based on user visibility and branch
def build_rosseti_yug_menu(user_data):
    keyboard = [[button["text"]] for button in ROSSETI_YUG_MENU if has_access(user_data, button["visibility"], button.get("branch"))]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build Rosseti Kuban submenu based on user visibility and branch
def build_rosseti_kuban_menu(user_data):
    keyboard = [[button["text"]] for button in ROSSETI_KUBAN_MENU if has_access(user_data, button["visibility"], button.get("branch"))]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build ES submenu based on user visibility
def build_es_submenu(user_data):
    keyboard = [[button["text"]] for button in ES_SUBMENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build Reports submenu
def build_reports_menu(user_data):
    keyboard = [[button["text"]] for button in REPORTS_MENU if has_access(user_data, button["visibility"])]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True) if keyboard else ReplyKeyboardRemove()

# Build TP selection keyboard
def build_tp_selection_menu(tp_options):
    keyboard = [[tp] for tp in tp_options]
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Build VL selection keyboard
def build_vl_selection_menu(vl_options):
    keyboard = [[vl] for vl in vl_options]
    keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Fuzzy search for TP
def fuzzy_search_tp(search_term, df):
    if not isinstance(search_term, str):
        return []
    search_term = re.sub(r'[- ]', '', search_term.lower())
    matches = []
    for tp in df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"].dropna().unique():
        if not isinstance(tp, str):
            continue
        normalized_tp = re.sub(r'[- ]', '', tp.lower())
        if search_term in normalized_tp:
            matches.append(tp)
    return matches

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    fio = user_data["FIO"]
    context.user_data["state"] = "MAIN_MENU"
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fio}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
    )
    return ConversationHandler.END

# Message handler for button presses
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    state = context.user_data.get("state", "MAIN_MENU")

    if state == "MAIN_MENU":
        if text == "‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –Æ–ì" and has_access(user_data, "UG"):
            context.user_data["state"] = "ROSSETI_YUG"
            context.user_data["previous_state"] = "MAIN_MENU"
            context.user_data["is_rosseti_yug"] = True
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_yug_menu(user_data)
            )
        elif text == "‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å" and has_access(user_data, "RK"):
            context.user_data["state"] = "ROSSETI_KUBAN"
            context.user_data["previous_state"] = "MAIN_MENU"
            context.user_data["is_rosseti_yug"] = False
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_kuban_menu(user_data)
            )
        elif text == "üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç—ã" and has_access(user_data, "All"):
            context.user_data["state"] = "REPORTS_MENU"
            context.user_data["previous_state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:", reply_markup=build_reports_menu(user_data)
            )
        elif text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫" and has_access(user_data, "All"):
            await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìû. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and has_access(user_data, "All"):
            await update.message.reply_text("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìñ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "üìö –°–ø—Ä–∞–≤–∫–∞" and has_access(user_data, "All"):
            await update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞ üìö. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and has_access(user_data, "All"):
            await start(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    elif state == "ROSSETI_YUG":
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and has_access(user_data, "All"):
            context.user_data["state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
            )
        else:
            for button in ROSSETI_YUG_MENU:
                if text == button["text"] and has_access(user_data, button["visibility"], button.get("branch")):
                    context.user_data["state"] = "ES_SUBMENU"
                    context.user_data["selected_es"] = text.replace("‚ö°Ô∏è ", "")
                    context.user_data["previous_state"] = "ROSSETI_YUG"
                    await update.message.reply_text(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text.replace('‚ö°Ô∏è ', '')}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_es_submenu(user_data)
                    )
                    return ConversationHandler.END
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≠–° –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    elif state == "ROSSETI_KUBAN":
        if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and has_access(user_data, "All"):
            context.user_data["state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
            )
        else:
            for button in ROSSETI_KUBAN_MENU:
                if text == button["text"] and has_access(user_data, button["visibility"], button.get("branch")):
                    context.user_data["state"] = "ES_SUBMENU"
                    context.user_data["selected_es"] = text.replace("‚ö°Ô∏è ", "")
                    context.user_data["previous_state"] = "ROSSETI_KUBAN"
                    await update.message.reply_text(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text.replace('‚ö°Ô∏è ', '')}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_es_submenu(user_data)
                    )
                    return ConversationHandler.END
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≠–° –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    elif state == "ES_SUBMENU":
        selected_es = context.user_data.get("selected_es", "")
        if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –¢–ü" and has_access(user_data, "All"):
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ {selected_es}:", reply_markup=ReplyKeyboardRemove()
            )
            return SEARCH_TP
        elif text == "üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" and has_access(user_data, "All"):
            back_button = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –≥–¥–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°:", reply_markup=ReplyKeyboardMarkup(back_button, resize_keyboard=True)
            )
            return NOTIFY_TP
        elif text == "üìö –°–ø—Ä–∞–≤–∫–∞" and has_access(user_data, "All"):
            await update.message.reply_text(f"–°–ø—Ä–∞–≤–∫–∞ üìö. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and has_access(user_data, "All"):
            previous_state = context.user_data.get("previous_state", "MAIN_MENU")
            context.user_data["state"] = previous_state
            if previous_state == "ROSSETI_YUG":
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_yug_menu(user_data))
            elif previous_state == "ROSSETI_KUBAN":
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≠–°:", reply_markup=build_rosseti_kuban_menu(user_data))
            else:
                context.user_data["state"] = "MAIN_MENU"
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data))
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

    elif state == "REPORTS_MENU":
        if text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –†–æ—Å—Å–µ—Ç–∏ –Æ–ì" and has_access(user_data, "UG"):
            await export_to_bot(update, context, "yug")
            context.user_data["state"] = "REPORTS_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:", reply_markup=build_reports_menu(user_data)
            )
        elif text == "üì§ –í—ã–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å" and has_access(user_data, "RK"):
            await export_to_bot(update, context, "kuban")
            context.user_data["state"] = "REPORTS_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:", reply_markup=build_reports_menu(user_data)
            )
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and has_access(user_data, "All"):
            context.user_data["state"] = "MAIN_MENU"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_main_menu(user_data)
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

# Export to bot
async def export_to_bot(update: Update, context: ContextTypes.DEFAULT_TYPE, export_type: str):
    table = "notifications_yug" if export_type == "yug" else "notifications_kuban"
    filename = f"report_{export_type}.xlsx"
    
    try:
        conn = sqlite3.connect("notifications.db")
        df = pd.read_sql_query(f"SELECT * FROM {table}", conn)
        conn.close()

        if df.empty:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
            return

        df.to_excel(filename, index=False)
        with open(filename, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)
        os.remove(filename)
        await update.message.reply_text("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Search TP handler
async def search_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    search_term = update.message.text
    selected_es = context.user_data.get("selected_es", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_data(selected_es, is_rosseti_yug)

    if df.empty:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=build_es_submenu(user_data)
        )
        context.user_data["state"] = "ES_SUBMENU"
        return ConversationHandler.END

    exact_match = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == search_term]
    if not exact_match.empty:
        await send_tp_results(update, context, exact_match, selected_es, search_term)
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    tp_options = fuzzy_search_tp(search_term, df)
    if not tp_options:
        await update.message.reply_text(
            f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEARCH_TP

    context.user_data["tp_options"] = tp_options
    await update.message.reply_text(
        f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", 
        reply_markup=build_tp_selection_menu(tp_options)
    )
    return SELECT_TP

# Select TP handler (for search)
async def select_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    selected_es = context.user_data.get("selected_es", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_data(selected_es, is_rosseti_yug)

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    if text in context.user_data.get("tp_options", []):
        df_filtered = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]
        await send_tp_results(update, context, df_filtered, selected_es, text)
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¢–ü –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
        reply_markup=build_tp_selection_menu(context.user_data.get("tp_options", []))
    )
    return SELECT_TP

# Notify TP handler
async def notify_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        selected_es = context.user_data.get("selected_es", "")
        context.user_data["state"] = "ES_SUBMENU"
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", reply_markup=build_es_submenu(user_data)
        )
        return ConversationHandler.END

    search_term = text
    selected_es = context.user_data.get("selected_es", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_directory_data(selected_es, is_rosseti_yug)

    if df.empty:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=build_es_submenu(user_data)
        )
        context.user_data["state"] = "ES_SUBMENU"
        return ConversationHandler.END

    exact_match = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == search_term]
    if not exact_match.empty:
        vl_options = exact_match["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].dropna().unique().tolist()
        context.user_data["selected_tp"] = search_term
        context.user_data["vl_options"] = vl_options
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è {search_term}:", 
            reply_markup=build_vl_selection_menu(vl_options)
        )
        return NOTIFY_VL

    tp_options = fuzzy_search_tp(search_term, df)
    if not tp_options:
        back_button = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ {selected_es}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup(back_button, resize_keyboard=True)
        )
        return NOTIFY_TP

    context.user_data["tp_options"] = tp_options
    await update.message.reply_text(
        f"–¢–ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", 
        reply_markup=build_tp_selection_menu(tp_options)
    )
    return NOTIFY_TP

# Notify VL handler
async def notify_vl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    text = update.message.text
    selected_es = context.user_data.get("selected_es", "")
    vl_options = context.user_data.get("vl_options", [])

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        back_button = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü –≥–¥–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°:", 
            reply_markup=ReplyKeyboardMarkup(back_button, resize_keyboard=True)
        )
        return NOTIFY_TP

    if text in vl_options:
        context.user_data["selected_vl"] = text
        location_button = [[{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "request_location": True}]]
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardMarkup(location_button, resize_keyboard=True)
        )
        return NOTIFY_GEO

    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_directory_data(selected_es, is_rosseti_yug)
    if text in context.user_data.get("tp_options", []):
        context.user_data["selected_tp"] = text
        vl_options = df[df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == text]["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"].dropna().unique().tolist()
        context.user_data["vl_options"] = vl_options
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –í–õ –¥–ª—è {text}:", 
            reply_markup=build_vl_selection_menu(vl_options)
        )
        return NOTIFY_VL

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –í–õ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
        reply_markup=build_vl_selection_menu(vl_options)
    )
    return NOTIFY_VL

# Notify Geo handler
async def notify_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)

    if not user_data:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    if not update.message.location:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove()
        )
        return NOTIFY_GEO

    latitude = update.message.location.latitude
    longitude = update.message.location.longitude
    geo_data = f"{latitude}, {longitude}"
    selected_es = context.user_data.get("selected_es", "")
    selected_tp = context.user_data.get("selected_tp", "")
    selected_vl = context.user_data.get("selected_vl", "")
    is_rosseti_yug = context.user_data.get("is_rosseti_yug", False)
    df = load_tp_directory_data(selected_es, is_rosseti_yug)

    res = df[(df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü"] == selected_tp) & (df["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ"] == selected_vl)]["–†–≠–°"].iloc[0] if not df.empty else None
    if not res:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –†–≠–° –¥–ª—è –¢–ü {selected_tp} –∏ –í–õ {selected_vl}.",
            reply_markup=build_es_submenu(user_data)
        )
        context.user_data["state"] = "ES_SUBMENU"
        return ConversationHandler.END

    responsible_id, responsible_fio = find_responsible(res, users)
    if not responsible_id:
        await update.message.reply_text(
            f"üö´ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ {res} –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!",
            reply_markup=build_es_submenu(user_data)
        )
        context.user_data["state"] = "ES_SUBMENU"
        return ConversationHandler.END

    # Log notification to SQLite
    conn = sqlite3.connect("notifications.db")
    cursor = conn.cursor()
    table = "notifications_yug" if is_rosseti_yug else "notifications_kuban"
    branch = "–†–æ—Å—Å–µ—Ç–∏ –Æ–ì" if is_rosseti_yug else "–†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å"
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute(
        f"""
        INSERT INTO {table} (branch, res, sender_fio, sender_id, receiver_fio, receiver_id, timestamp, coordinates)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (branch, res, user_data["FIO"], user_id, responsible_fio, responsible_id, timestamp, geo_data)
    )
    conn.commit()
    conn.close()

    sender_fio = user_data["FIO"]
    notification = f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –ù–∞–π–¥–µ–Ω –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –í–û–õ–°! {sender_fio}, {selected_tp}, {selected_vl}. –ì–µ–æ–¥–∞–Ω–Ω—ã–µ."
    await context.bot.send_message(chat_id=responsible_id, text=notification)
    await context.bot.send_location(chat_id=responsible_id, latitude=latitude, longitude=longitude)
    await context.bot.send_message(chat_id=responsible_id, text=geo_data)
    await update.message.reply_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! {res} –†–≠–°, {responsible_fio}.",
        reply_markup=build_es_submenu(user_data)
    )
    context.user_data["state"] = "ES_SUBMENU"
    return ConversationHandler.END

# Send TP results
async def send_tp_results(update: Update, context: ContextTypes.DEFAULT_TYPE, df, selected_es, tp_name):
    count = len(df)
    res = df.get("–†–≠–°", pd.Series([selected_es])).iloc[0] if not df.empty else selected_es
    await update.message.reply_text(f"–í {res} –Ω–∞ –¢–ü {tp_name} –Ω–∞–π–¥–µ–Ω–æ {count} –í–û–õ–° —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∞—Ä–µ–Ω–¥—ã.")
    
    for _, row in df.iterrows():
        message = (
            f"üìç –í–õ: {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n"
            f"–û–ø–æ—Ä—ã: {row['–û–ø–æ—Ä—ã']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞']}"
        )
        await update.message.reply_text(message)

# Cancel search or notification
async def cancel_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_user_data()
    user_data = users.get(user_id)
    selected_es = context.user_data.get("selected_es", "")
    context.user_data["state"] = "ES_SUBMENU"
    await update.message.reply_text(
        f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {selected_es}:", 
        reply_markup=build_es_submenu(user_data)
    )
    return ConversationHandler.END

# Error handler
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

# Webhook endpoint
@app.post("/webhook")
async def webhook(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    if update:
        await application.process_update(update)
    return {"status": "ok"}

# Root endpoint for health check
@app.get("/")
async def root():
    return {"message": "Bot is running"}

# Lifespan event handler for startup and shutdown
from contextlib import asynccontextmanager
@asynccontextmanager
async def lifespan(app):
    init_db()
    webhook_url = f"{SELF_URL}/webhook"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook set to {webhook_url}")
    await application.initialize()
    try:
        yield
    finally:
        await application.stop()

app.lifespan = lifespan

def main():
    # Conversation handler for TP search, notifications, and reports
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT, handle_message)],
        states={
            SEARCH_TP: [MessageHandler(filters.TEXT, search_tp)],
            SELECT_TP: [MessageHandler(filters.TEXT, select_tp)],
            NOTIFY_TP: [MessageHandler(filters.TEXT, notify_tp)],
            NOTIFY_VL: [MessageHandler(filters.TEXT, notify_vl)],
            NOTIFY_GEO: [MessageHandler(filters.LOCATION, notify_geo)],
            REPORTS_MENU: [MessageHandler(filters.TEXT, handle_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel_action)],
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # Start FastAPI server
    uvicorn.run(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
