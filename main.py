# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é send_notification –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π:

async def send_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º"""
    user_id = str(update.effective_user.id)
    user_data = user_states.get(user_id, {})
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_info = get_user_permissions(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    tp_data = user_data.get('tp_data', {})
    selected_tp = user_data.get('selected_tp')
    selected_vl = user_data.get('selected_vl')
    location = user_data.get('location', {})
    photo_id = user_data.get('photo_id')
    comment = user_data.get('comment', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (–∫–æ–ª–æ–Ω–∫–∏ A –∏ B)
    branch_from_reference = tp_data.get('–§–∏–ª–∏–∞–ª', '').strip()  # –ö–æ–ª–æ–Ω–∫–∞ A
    res_from_reference = tp_data.get('–†–≠–°', '').strip()  # –ö–æ–ª–æ–Ω–∫–∞ B
    
    branch = user_data.get('branch')
    network = user_data.get('network')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    sending_messages = [
        "üì® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...",
        "üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü...",
        "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...",
        "‚úÖ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
    ]
    
    loading_msg = await update.message.reply_text(sending_messages[0])
    
    for msg_text in sending_messages[1:]:
        await asyncio.sleep(0.5)
        try:
            await loading_msg.edit_text(msg_text)
        except Exception:
            pass
    
    # –ò—â–µ–º –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    responsible_users = []
    
    logger.info(f"–ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è:")
    logger.info(f"  –§–∏–ª–∏–∞–ª –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: '{branch_from_reference}'")
    logger.info(f"  –†–≠–° –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: '{res_from_reference}'")
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
    for uid, udata in users_cache.items():
        responsible_for = udata.get('responsible', '').strip()
        
        if not responsible_for:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ñ–∏–ª–∏–∞–ª–æ–º –∏–ª–∏ –†–≠–° –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        if responsible_for == branch_from_reference or responsible_for == res_from_reference:
            responsible_users.append({
                'id': uid,
                'name': udata.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
                'email': udata.get('email', ''),
                'responsible_for': responsible_for
            })
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {udata.get('name')} (ID: {uid}) - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ '{responsible_for}'")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = f"""üö® –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ë–ï–ó–î–û–ì–û–í–û–†–ù–û–ú –í–û–õ–°

üìç –§–∏–ª–∏–∞–ª: {branch}
üìç –†–≠–°: {res_from_reference}
üìç –¢–ü: {selected_tp}
‚ö° –í–õ: {selected_vl}

üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info['name']}
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    if location:
        lat = location.get('latitude')
        lon = location.get('longitude')
        notification_text += f"\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
        notification_text += f"\nüó∫ [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ](https://maps.google.com/?q={lat},{lon})"
    
    if comment:
        notification_text += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    recipients_info = ", ".join([f"{u['name']} ({u['id']})" for u in responsible_users]) if responsible_users else "–ù–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    notification_data = {
        'branch': branch,
        'res': res_from_reference,
        'tp': selected_tp,
        'vl': selected_vl,
        'sender_name': sender_info['name'],
        'sender_id': user_id,
        'recipient_name': recipients_info,
        'recipient_id': ", ".join([u['id'] for u in responsible_users]) if responsible_users else '–ù–µ –Ω–∞–π–¥–µ–Ω—ã',
        'datetime': datetime.now().strftime('%d.%m.%Y %H:%M'),
        'coordinates': f"{location.get('latitude', 0):.6f}, {location.get('longitude', 0):.6f}" if location else '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
        'comment': comment,
        'has_photo': bool(photo_id)
    }
    
    notifications_storage[network].append(notification_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_activity:
        user_activity[user_id] = {'last_activity': datetime.now(), 'count': 0}
    user_activity[user_id]['count'] += 1
    user_activity[user_id]['last_activity'] = datetime.now()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
    success_count = 0
    failed_users = []
    
    for responsible in responsible_users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=responsible['id'],
                text=notification_text,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
            if location:
                await context.bot.send_location(
                    chat_id=responsible['id'],
                    latitude=location.get('latitude'),
                    longitude=location.get('longitude')
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            if photo_id:
                await context.bot.send_photo(
                    chat_id=responsible['id'],
                    photo=photo_id,
                    caption=f"–§–æ—Ç–æ —Å {selected_tp}"
                )
            
            success_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (responsible['email'] and 
                user_email_settings.get(responsible['id'], {}).get('enabled', True)):
                
                email_subject = f"–í–û–õ–°: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {sender_info['name']}"
                email_body = f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {responsible['name']}!

–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω–æ–º –í–û–õ–°.

{notification_text.replace('üö®', '').replace('üìç', '‚Ä¢').replace('‚ö°', '‚Ä¢').replace('üë§', '‚Ä¢').replace('üïê', '‚Ä¢').replace('üí¨', '‚Ä¢').replace('üó∫', '')}

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–∫—Ä–æ–π—Ç–µ Telegram.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ë–æ—Ç –í–û–õ–° –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"""
                
                await send_email(responsible['email'], email_subject, email_body)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {responsible['name']} ({responsible['id']}): {e}")
            failed_users.append(f"{responsible['name']} ({responsible['id']}): {str(e)}")
    
    # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_msg.delete()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if responsible_users:
        if success_count == len(responsible_users):
            result_text = f"""‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!

üì® –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({success_count}):"""
            for responsible in responsible_users:
                result_text += f"\n‚Ä¢ {responsible['name']} (–æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ {responsible['responsible_for']})"
                if responsible['email'] and user_email_settings.get(responsible['id'], {}).get('enabled', True):
                    result_text += f" üìß"
        else:
            result_text = f"""‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ

‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count} –∏–∑ {len(responsible_users)}

‚ùå –û—à–∏–±–∫–∏:"""
            for failed in failed_users:
                result_text += f"\n‚Ä¢ {failed}"
    else:
        result_text = f"""‚ùå –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

–î–ª—è –¥–∞–Ω–Ω–æ–π –¢–ü –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞.
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö.

–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –§–∏–ª–∏–∞–ª –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: "{branch_from_reference}"
- –†–≠–° –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: "{res_from_reference}"
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users_cache)}

–°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π":"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        unique_responsible = set(u.get('responsible', '') for u in users_cache.values() if u.get('responsible'))
        for resp in list(unique_responsible)[:10]:
            result_text += f"\n‚Ä¢ {resp}"
        if len(unique_responsible) > 10:
            result_text += f"\n... –∏ –µ—â–µ {len(unique_responsible) - 10}"
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {'state': f'branch_{branch}', 'branch': branch, 'network': network}
    
    await update.message.reply_text(
        result_text,
        reply_markup=get_branch_menu_keyboard()
    )
