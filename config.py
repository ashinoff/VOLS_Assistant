import logging
import io
from functools import lru_cache
import pandas as pd
import httpx
import uvicorn
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from config import *

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
application: Application

(CH_NET, CH_BR, CH_ACT, IN_TP, VAR_SEL) = range(5)

MAIN_MENU = [[KeyboardButton("‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –Æ–ì")], [KeyboardButton("‚ö°Ô∏è –†–æ—Å—Å–µ—Ç–∏ –ö—É–±–∞–Ω—å")]]
UG_MENU = [[KeyboardButton(v)] for v in [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°","–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°","–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°","–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°",
    "–Æ–∂–Ω—ã–µ –≠–°","–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°","–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°","–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°"]] + [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
RK_MENU = [[KeyboardButton(v)] for v in [
    "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°","–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°","–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°","–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°",
    "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°","–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°","–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°","–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°","–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°","–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°"]] + [[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]]
ACTION_MENU = [[KeyboardButton("üîç –ü–æ–∏—Å–∫ –¢–ü")], [KeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")],
               [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")], [KeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")]]
SPARK_MENU = [
    [KeyboardButton("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –Æ–ì")],
    [KeyboardButton("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –ö—É–±–∞–Ω—å")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]

URL_MAP = {
    "–Æ–ì": {
        "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": (YUGO_ZAPAD_URL_UG, YUGO_ZAPAD_URL_UG_SP),
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –≠–°": (CENTRAL_URL_UG, CENTRAL_URL_UG_SP),
        "–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": (ZAPAD_URL_UG, ZAPAD_URL_UG_SP),
        "–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": (VOSTOCH_URL_UG, VOSTOCH_URL_UG_SP),
        "–Æ–∂–Ω—ã–µ –≠–°": (YUZH_URL_UG, YUZH_URL_UG_SP),
        "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": (SEVERO_VOSTOCH_URL_UG, SEVERO_VOSTOCH_URL_UG_SP),
        "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–µ –≠–°": (YUGO_VOSTOCH_URL_UG, YUGO_VOSTOCH_URL_UG_SP),
        "–°–µ–≤–µ—Ä–Ω—ã–µ –≠–°": (SEVER_URL_UG, SEVER_URL_UG_SP),
    },
    "–ö—É–±–∞–Ω—å": {
        "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–µ –≠–°": (YUGO_ZAPAD_URL_RK, YUGO_ZAPAD_URL_RK_SP),
        "–£—Å—Ç—å-–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": (UST_LABINSK_URL_RK, UST_LABINSK_URL_RK_SP),
        "–¢–∏–º–∞—à–µ–≤—Å–∫–∏–µ –≠–°": (TIMASHEVSK_URL_RK, TIMASHEVSK_URL_RK_SP),
        "–¢–∏—Ö–æ—Ä–µ—Ü–∫–∏–µ –≠–°": (TIKHORETSK_URL_RK, TIKHORETSK_URL_RK_SP),
        "–°–æ—á–∏–Ω—Å–∫–∏–µ –≠–°": (SOCHI_URL_RK, SOCHI_URL_RK_SP),
        "–°–ª–∞–≤—è–Ω—Å–∫–∏–µ –≠–°": (SLAVYANSK_URL_RK, SLAVYANSK_URL_RK_SP),
        "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–µ –≠–°": (LENINGRADSK_URL_RK, LENINGRADSK_URL_RK_SP),
        "–õ–∞–±–∏–Ω—Å–∫–∏–µ –≠–°": (LABINSK_URL_RK, LABINSK_URL_RK_SP),
        "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ –≠–°": (KRASNODAR_URL_RK, KRASNODAR_URL_RK_SP),
        "–ê—Ä–º–∞–≤–∏—Ä—Å–∫–∏–µ –≠–°": (ARMAVIR_URL_RK, ARMAVIR_URL_RK_SP),
        "–ê–¥—ã–≥–µ–π—Å–∫–∏–µ –≠–°": (ADYGEYSK_URL_RK, ADYGEYSK_URL_RK_SP),
    }
}

_csv_cache = {}
async def fetch_csv(url):
    if not url: return pd.DataFrame()
    if url in _csv_cache: return _csv_cache[url]
    resp = await app.state.http.get(url, follow_redirects=True)
    resp.raise_for_status()
    df = pd.read_csv(io.StringIO(resp.text))
    _csv_cache[url] = df
    return df

@lru_cache(maxsize=1)
def load_users():
    return {str(r['Telegram ID']): r for _,r in pd.read_csv(ZONES_CSV_URL).iterrows()}

async def show_results(update, ctx, tp, df):
    filt = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü']==tp]
    await update.message.reply_text(f"–ù–∞ {tp} –Ω–∞–π–¥–µ–Ω–æ {len(filt)} –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –í–û–õ–°.")
    for _,r in filt.iterrows():
        await update.message.reply_text(
            f"üì° {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –í–õ']}\n–û–ø–æ—Ä—ã: {r['–û–ø–æ—Ä—ã']} ({r['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä']})\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞']}"
        )
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏—è:', reply_markup=ReplyKeyboardMarkup(ACTION_MENU, resize_keyboard=True))
    return CH_ACT

async def variant_selection(update, ctx):
    txt = update.message.text
    if txt=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥': return await select_branch(update, ctx)
    opts = ctx.user_data.get('variants', [])
    if txt not in opts:
        await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.')
        return VAR_SEL
    df = await fetch_csv(ctx.user_data['urls'][0])
    return await show_results(update, ctx, txt, df)

async def search_tp(update, ctx):
    term = update.message.text or ''
    norm = term.lower().replace(' ','').replace('-','')
    full,sp = ctx.user_data['urls']
    df = await fetch_csv(full)
    df['__n']=df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'].str.lower().str.replace(' ','').str.replace('-','')
    m=df[df['__n'].str.contains(norm,na=False)]
    if m.empty:
        await update.message.reply_text(f"–¢–ü '{term}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return CH_ACT
    tps = m['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¢–ü'].drop_duplicates().tolist()
    if len(tps)==1:
        return await show_results(update, ctx, tps[0], m)
    opts=tps[:10]
    ctx.user_data['variants']=opts
    kb=[[KeyboardButton(o)] for o in opts]+[[KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]]
    await update.message.reply_text('–í–∞—Ä–∏–∞–Ω—Ç—ã:',reply_markup=ReplyKeyboardMarkup(kb,resize_keyboard=True))
    return VAR_SEL

async def start(update, ctx):
    uid=str(update.effective_user.id)
    if uid not in load_users():
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return ConversationHandler.END
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:',reply_markup=ReplyKeyboardMarkup(MAIN_MENU,resize_keyboard=True))
    return CH_NET

async def select_network(update, ctx):
    net=update.message.text.replace('‚ö°Ô∏è ','')
    if net not in URL_MAP: return await start(update,ctx)
    ctx.user_data['network']=net
    menu=UG_MENU if net=='–Æ–ì' else RK_MENU
    await update.message.reply_text(f'{net}: –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:',reply_markup=ReplyKeyboardMarkup(menu,resize_keyboard=True))
    return CH_BR

async def select_branch(update, ctx):
    b=update.message.text
    if b=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥': return await start(update,ctx)
    net=ctx.user_data['network']
    if b not in URL_MAP[net]: return await select_network(update,ctx)
    ctx.user_data['urls']=URL_MAP[net][b]
    await update.message.reply_text(f'–§–∏–ª–∏–∞–ª {b}:', reply_markup=ReplyKeyboardMarkup(ACTION_MENU,resize_keyboard=True))
    return CH_ACT

async def branch_action(update, ctx):
    act=update.message.text
    # –°–ø—Ä–∞–≤–∫–∞
    if act=='‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞':
        await update.message.reply_text('–°–ø—Ä–∞–≤–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∏:', reply_markup=ReplyKeyboardMarkup(SPARK_MENU, resize_keyboard=True))
        return CH_ACT
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
    if act == "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –Æ–ì":
        df = pd.read_csv(NOTIFY_LOG_FILE_UG)
        bio = io.BytesIO()
        with pd.ExcelWriter(bio, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="UG")
        bio.seek(0)
        await update.message.reply_document(bio, filename="log_ug.xlsx")
        return CH_ACT
    if act == "üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –í–û–õ–° –ö—É–±–∞–Ω—å":
        df = pd.read_csv(NOTIFY_LOG_FILE_RK)
        bio = io.BytesIO()
        with pd.ExcelWriter(bio, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="RK")
        bio.seek(0)
        await update.message.reply_document(bio, filename="log_rk.xlsx")
        return CH_ACT
    if act=='‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await select_network(update,ctx)
    if act=='üîç –ü–æ–∏—Å–∫ –¢–ü':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¢–ü:')
        return IN_TP
    if act=='üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ':
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤–∫–∞...')
        return CH_ACT
    await update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª')
    return CH_ACT

async def error_handler(update,ctx):
    logger.error(ctx.error)

@app.on_event('startup')
async def on_startup():
    app.state.http=httpx.AsyncClient()
    global application
    application=Application.builder().token(TOKEN).build()
    conv=ConversationHandler(
        entry_points=[CommandHandler('start',start)],
        states={
            CH_NET:[MessageHandler(filters.TEXT&~filters.COMMAND,select_network)],
            CH_BR:[MessageHandler(filters.TEXT&~filters.COMMAND,select_branch)],
            CH_ACT:[MessageHandler(filters.TEXT&~filters.COMMAND,branch_action)],
            IN_TP:[MessageHandler(filters.TEXT&~filters.COMMAND,search_tp)],
            VAR_SEL:[MessageHandler(filters.TEXT&~filters.COMMAND,variant_selection)],
        },
        fallbacks=[CommandHandler('cancel',start)],
    )
    application.add_handler(conv)
    application.add_error_handler(error_handler)
    await application.initialize()
    await application.bot.set_webhook(f"{SELF_URL}/webhook")

@app.post('/webhook')
async def webhook(request:Request):
    upd=Update.de_json(await request.json(),application.bot)
    await application.process_update(upd)
    return {'status':'ok'}

@app.on_event('shutdown')
async def on_shutdown():
    await application.stop()
    await app.state.http.aclose()

if __name__=='__main__':
    uvicorn.run(app,host='0.0.0.0',port=PORT)
